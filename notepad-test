# -*-coding:UTF-8 -*-
import tkinter,requests,json
from tkinter.font import Font
from tkinter import ttk
from tkinter.filedialog import *
from tkinter.messagebox import *
import os,sys,wmi,winsound,win32api
from os import stat,remove
import random,win32print
import gzip,io,win32com
from win32com.client import Dispatch, constants
import time,win32com.client
import shutil,datetime,hashlib
import http.client
import urllib,csv,docx
#pip install python_docx
import qrcode,binascii,pyAesCrypt,chardet
#from tkinter import filedialog
#import wx	#pip install -U wxPython
from PIL import Image	#add it pillow and pillow-pil in pycharm
import fitz 	#pip install pymupdf
#from pdf2image import convert_from_path ## pip install pdf2image  or pip install --user pdf2image
from pdfplumber import open as openpd
#import pdfplumber	#add it in pycharm
import sqlite3
#for mail_log
import webbrowser as web
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from ttkthemes import *
#add ttkthemes in pycharm
#copy ttkthemes-3.2.2 in the projext
#cd E:\lab\trans-note21.210\ttkthemes-3.2.2
#python setup.py install
import matplotlib.pylab as plt
import sympy
from threading import Thread,Lock
import pythoncom
import numpy as np
import windnd

global boyandgirl

def willquit():
    save2()

    toolbar2.pack_forget()
    toolbar4.pack_forget()
    toolbar3.pack_forget()
    notebook.pack_forget()
    canva.pack()
    drawp()
    root.quit()
    #exit()
'''pip or pip3
pip3 install requests
pip3 install baidu-aip
pip3 install wxpy
pip3 install sympy
pip3 install openpyxl
pip3 install pdfplumber
pip3 install python-pptx
pip3 install python-docx
pip3 install qrcode
pip3 install pyAesCrypt
'''
#import openpyxl
#from pprint import pprint
class TkFileDialogExample(tkinter.Frame):
    def __init__(self, root):
        tkinter.Frame.__init__(self, root)
        # define options for opening or saving a file
        self.file_opt = options = {}
        options['defaultextension'] = '.txt'
        options['filetypes'] = [('all files', '.*'), ('text files', '.txt')]
        options['initialdir'] = 'C:\\'
        options['initialfile'] = 'myfile.txt'
        options['parent'] = root
        options['title'] = 'This is a title'
        # This is only available on the Macintosh, and only when Navigation Services are installed.
        #options['message'] = 'message'
        # if you use the multiple file version of the module functions this option is set automatically.
        #options['multiple'] = 1
        # defining options for opening a directory
        self.dir_opt = options = {}
        options['initialdir'] = 'C:\\'
        options['mustexist'] = False
        options['parent'] = root
        options['title'] = 'This is a title'
    def askopenfile(self):
        """Returns an opened file in read mode."""
        return tkinter.tkFileDialog.askopenfile(mode='r', **self.file_opt)
    def askopenfilename(self):
        """Returns an opened file in read mode.
        This time the dialog just returns a filename and the file is opened by your own code.
        """
        # get filename
        filename = tkinter.tkFileDialog.askopenfilename(**self.file_opt)
        # open file on your own
        if filename:
            return open(filename, 'r')
    def asksaveasfile(self):
        """Returns an opened file in write mode."""
        return tkinter.tkFileDialog.asksaveasfile(mode='w', **self.file_opt)
    def asksaveasfilename(self):
        """Returns an opened file in write mode.
        This time the dialog just returns a filename and the file is opened by your own code.
        """
        # get filename
        filename = tkinter.tkFileDialog.asksaveasfilename(**self.file_opt)
        # open file on your own
        if filename:
            return open(filename, 'w')
    def askdirectory(self):
        """Returns a selected directoryname."""
        return tkinter.tkFileDialog.askdirectory(**self.dir_opt)
#qr-code
#import qrcode
#from PIL import Image
#生成二维码图片
def make_qr(str,save):
    qr=qrcode.QRCode(
        version=4,  #生成二维码尺寸的大小 1-40  1:21*21（21+(n-1)*4）
        error_correction=qrcode.constants.ERROR_CORRECT_M, #L:7% M:15% Q:25% H:30%
        box_size=10, #每个格子的像素大小
        border=2, #边框的格子宽度大小
    )
    qr.add_data(str)
    qr.make(fit=True)
    img=qr.make_image()
    img.save(save)
#生成带logo的二维码图片
def make_logo_qr(str,logo,save):
    #参数配置
    qr=qrcode.QRCode(
        version=4,
        error_correction=qrcode.constants.ERROR_CORRECT_Q,
        box_size=8,
        border=2
    )
    #添加转换内容
    qr.add_data(str)
    qr.make(fit=True)
    #生成二维码
    img=qr.make_image()
    img=img.convert("RGBA")
    #添加logo
    if logo and os.path.exists(logo):
        icon=Image.open(logo)
        #获取二维码图片的大小
        img_w,img_h=img.size
        factor=4
        size_w=int(img_w/factor)
        size_h=int(img_h/factor)
        #logo图片的大小不能超过二维码图片的1/4
        icon_w,icon_h=icon.size
        if icon_w>size_w:
            icon_w=size_w
        if icon_h>size_h:
            icon_h=size_h
        icon=icon.resize((icon_w,icon_h),Image.ANTIALIAS)
        #详见：http://pillow.readthedocs.org/handbook/tutorial.html
        #计算logo在二维码图中的位置
        w=int((img_w-icon_w)/2)
        h=int((img_h-icon_h)/2)
        icon=icon.convert("RGBA")
        img.paste(icon,(w,h),icon)
        #详见：http://pillow.readthedocs.org/reference/Image.html#PIL.Image.Image.paste
    #保存处理后图片
    img.save(save)
def qrout():
    qrneirong = textPad.get(1.0, END)
    open("qrnote.txt", "wt").write(qrneirong)
    outfilenamepng = asksaveasfilename(title='保存二维码',initialfile='未命名.png', defaultextension='.png')
    save_path =outfilenamepng  # 生成后的保存文件
    logo = 'logo.jpg'  # logo图片
    print('把文字区内容生成二维码，如果程序同目录放一个logo.jpg，则二维码更美观。')
    time.sleep(1)
    path = os.getcwd() + r'\qrnote.txt'
    print(path)
    f = open(path, 'rt', encoding='UTF-8')
    str = qrneirong = textPad.get(1.0, END)
    # make_qr(str)
    str2=str.replace('\t', '\n ')
    make_logo_qr(str2, logo, save_path)
    runingpb()
    os.startfile( outfilenamepng)
#qr-code-end
filename = ''
def manypic2txt():
    from aip import AipOcr
    APP_ID = '16659'
    API_KEY = '3ZMAG'
    SECRET_KEY = 'mOvxP'
    aipOcr = AipOcr(APP_ID, API_KEY, SECRET_KEY)
    # 打开图片
    showinfo('Info', '批量图片识别获取文字，先把图片放到即将打开的waitpic文件夹，30秒后自动识别输出文本到waitpic2txt文件夹，也会自动打开这个文件夹')
    start_directoryp = os.getcwd() + '\waitpic'
    os.system("explorer.exe %s" % start_directoryp)
    time.sleep(30)
    def get_file_content(filePath):
        with open(filePath, 'rb') as fp:
            return fp.read()
    def basicAccurate(file):
        options = {}
        options["recognize_granularity"] = "small"
        options["language_type"] = "CHN_ENG"
        options["detect_direction"] = "true"  # 检测朝向
        options["detect_language"] = "true"  # 检测语言
        options["vertexes_location"] = "true"
        options["probability"] = "true"
        result = aipOcr.accurate(file, options)
        return (result)
    def png2txt(filename, output_filename):
        try:
            file0 = get_file_content(filename)
            result0 = basicAccurate(file0)
            for word in result0['words_result']:
                print(word['words'])
                gettext0 = word['words']
                gettext01 = gettext0.replace(u'\xa0', u' ').replace(u'\u3000', u' ').replace(u'\u200b', u' ').replace(
                    u'\xe4',
                    u' ').replace(
                    u'\xae', u' ').replace(u'\u2212', u' ').replace(u'\xa9', u' ').replace(u'\u2122', u' ').replace(
                    u'\u2011',
                    u' ').replace(
                    u'\xb5', u' ').replace(u'\u2022', u' ').replace(u'\u2799', u' ').replace(u'\u2709', u' ')
                with open(output_filename, "a") as rbfile0:
                    rbfile0.writelines(gettext01 + '\n')
            print('完成处理这个章节')
        except KeyError as e:
            pass
    dirname = os.getcwd() + "\\waitpic"
    dirnameout = os.getcwd() + "\\waitpic2txt"
    filenames = os.listdir(dirname)
    for filename in filenames:
        if filename.endswith('jpg') or filename.endswith('png'):
            base, ext = filename.split('.')
            new_name = base + '.txt'
            filename = dirname + '/' + filename
            output_filename = dirnameout + '/' + new_name
            png2txt(filename, output_filename)
    start_directoryt = os.getcwd() + '\waitpic2txt'
    os.system("explorer.exe %s" % start_directoryt)
def oldxlsopen():
    os.startfile(os.getcwd() + "\\goldtools\\xls.exe")
def wenzsbocr():
    os.startfile(os.getcwd() + "\\goldtools\\OCR.exe")
def lookcode():
    showinfo('Info', '系统默认为 %s'%sys.getdefaultencoding())
def myopen():
    global filename
    filename = askopenfilename(defaultextension = '.txt')
    if filename == '':
        filename = None
    else:
        root.title('Rogabet notepad   ' + os.path.basename(filename))
        textPad.delete(1.0, END)
        f = open(filename, 'r')
        f2 = open(file=filename,mode='rb')
        import chardet
        bimabima=f2.read()
        resultbima=chardet.detect(bimabima)
        resultbima2=str(resultbima)
        print(resultbima2)
        if '-8' in resultbima2:
            showinfo('notice','此文件是UTF-8编码，即将使用转码打开.')
            print(resultbima2)
            oldfile2 =filename
            global newfile2
            #newfile2 = asksaveasfilename(initialfile='utf8-ansi编码.txt', defaultextension='.txt')
            fp_ansi = open('utf8_ansi.txt', 'wb')  # 转码后输出的文件
            fp_utf8 = open(oldfile2, 'rb')  # 待转码的文件
            data = ""
            data = fp_utf8.read()
            data = data.decode('utf-8')  # 以二进制格式读入的数据需要先转码（转为内部码）才可以继续转换
            data = data.encode('mbcs', errors='ignore')  # 关键，将内部码再次编码
            fp_ansi.write(data)  # 写入文件
            fp_ansi.close()
            fp_utf8.close()
            f3 = open('utf8_ansi.txt', 'r')
            textPad.insert(1.0, f3.read())
        if '-16' in resultbima2:
            showinfo('notice','此文件是UTF-16-unicode编码，即将使用转码打开.')
            print(resultbima2)
            oldfile3 =filename
            global newfile3
            #newfile3 = asksaveasfilename(initialfile='unicode-ansi编码.txt', defaultextension='.txt')
            fp_ansi = open('unicode_ansi.txt', 'wb')  # 转码后输出的文件
            fp_utf16 = open(oldfile3, 'rb')  # 待转码的文件
            data = ""
            data = fp_utf16.read()
            data = data.decode('utf-16')  # 以二进制格式读入的数据需要先转码（转为内部码）才可以继续转换
            data = data.encode('mbcs', errors='ignore')  # 关键，将内部码再次编码
            fp_ansi.write(data)  # 写入文件
            fp_ansi.close()
            fp_utf16.close()
            f3 = open('unicode_ansi.txt', 'r')
            textPad.insert(1.0, f3.read())
        else:
            textPad.insert(1.0, f.read())
            f.close()
        #ansi =gb2312

def myopen2():
    global filename
    filename = askopenfilename(defaultextension = '.note')
    if filename == '':
        filename = None
    else:
        root.title('Rogabet notepad   ' + os.path.basename(filename))
        textPad.delete(1.0, END)

        with gzip.open(filename, 'rb') as input:
            with io.TextIOWrapper(input, encoding='utf-8') as dec:
                content2 = dec.read()
                textPad.insert(1.0, content2)
        #filename.close()
    runingpb()
def addtime():
    now=time.strftime('%Y-%m-%d %H:%M:%S')
    textPad.insert(1.0, now)
def maingetgg():
    import pandas as pd
    from urllib.parse import urlencode
    import requests
    start_directory = os.getcwd() + '\stock\gg股票公告爬取2'
    os.system("explorer.exe %s" % start_directory)

def getmystock_kcsv():
        import pandas as pd
        from urllib.parse import urlencode
        import requests
        def gen_secid(rawcode: str) -> str:
            '''
            生成东方财富专用的secid
            Parameters
            ----------
            rawcode : 6 位股票代码
            Return
            ------
            str: 指定格式的字符串
            '''
            # 沪市指数
            if rawcode[:3] == '000':
                return f'1.{rawcode}'
            # 深证指数
            if rawcode[:3] == '399':
                return f'0.{rawcode}'
            # 沪市股票
            if rawcode[0] != '6':
                return f'0.{rawcode}'
            # 深市股票
            return f'1.{rawcode}'

        def get_k_history(code: str, beg: str = '20090101', end: str = '20490101', klt: int = kxplv,fqt: int = fqtvar) -> pd.DataFrame:
        #def get_k_history(code: str, beg: str, end: str, klt: int = kxplv,fqt: int = fqtvar) -> pd.DataFrame:
            '''
            功能获取k线数据 Parameters
            code : 6 位股票代码
            beg: 开始日期 例如 20200101
            end: 结束日期 例如 20200201
            klt: k线间距 默认为 101 即日k
                klt:1 1 分钟
                klt:101 日
            fqt: 复权方式
                不复权 : 0
                前复权 : 1
                后复权 : 2
            Return
            DateFrame : 包含股票k线数据
            '''
            EastmoneyKlines = {
                'f51': '日期',
                'f52': '开盘',
                'f53': '收盘',
                'f54': '最高',
                'f55': '最低',
                'f56': '成交量',
                'f57': '成交额',
                'f58': '振幅',
                'f59': '涨跌幅',
                'f60': '涨跌额',
                'f61': '换手率',
            }
            EastmoneyHeaders = {
                'Host': '19.push2.eastmoney.com',
                'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; Touch; rv:11.0) like Gecko',
                'Accept': '*/*',
                'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
                'Referer': 'http://quote.eastmoney.com/center/gridlist.html',
            }
            fields = list(EastmoneyKlines.keys())
            columns = list(EastmoneyKlines.values())
            fields2 = ",".join(fields)
            secid = gen_secid(code)
            params = (
                ('fields1', 'f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13'),
                ('fields2', fields2),
                ('beg', beg),
                ('end', end),
                ('rtntype', '6'),
                ('secid', secid),
                ('klt', f'{klt}'),
                ('fqt', f'{fqt}'),
            )
            params = dict(params)
            base_url = 'https://push2his.eastmoney.com/api/qt/stock/kline/get'
            url = base_url + '?' + urlencode(params)
            json_response: dict = requests.get(
                url, headers=EastmoneyHeaders).json()

            data = json_response.get('data')
            if data is None:
                if secid[0] == '0':
                    secid = f'1.{code}'
                else:
                    secid = f'0.{code}'
                params['secid'] = secid
                url = base_url + '?' + urlencode(params)
                json_response: dict = requests.get(
                    url, headers=EastmoneyHeaders).json()
                data = json_response.get('data')
            if data is None:
                print('股票代码:', wodecode, '可能有误')
                return pd.DataFrame(columns=columns)
            klines = data['klines']
            rows = []
            for _kline in klines:
                kline = _kline.split(',')
                rows.append(kline)
            df = pd.DataFrame(rows, columns=columns)
            return df
            # 股票代码

        global wodecode
        wodecode = t1lagupiaocode.get(0.0, 'end').replace('\n', '')
        # 根据股票代码、开始日期、结束日期获取指定股票代码指定日期区间的k线数据
        df = get_k_history(wodecode)
        # 保存k线数据到表格里面
        df.to_csv(os.getcwd() +f'\stock\\my_{wodecode}.csv', encoding='utf-8-sig', index=None)
        print(f'股票代码：{wodecode} 的 k线数据已保存到程序目录下的 my_{wodecode}.csv 文件中')
        showinfo('notice', '股票自定义k线数据已保存到程序目录stock下的csv 文件中，即将为你打开这个目录')
        start_directory = os.getcwd() + '\stock'
        os.system("explorer.exe %s" % start_directory)
def new():
    global root, filename, textPad
    root.title('未命名文件')
    filename = None
    textPad.delete(1.0, END)
def save():
    global filename
    try:
        f = open(filename, 'w')
        msg = textPad.get(1.0, 'end').replace(u'\xa0', u' ').replace(u'\u3000', u' ').replace(u'\u200b', u' ').replace(u'\xe4', u' ').replace(u'\xae', u' ').replace(u'\u2212', u' ').replace(u'\xa9', u' ').replace(u'\u2122', u' ').replace(u'\u2011', u' ').replace(u'\xb5', u' ').replace(u'\u2022', u' ').replace(u'\u2799', u' ').replace(u'\u2709', u' ')

        f.write(msg)
        f.close()
    except:
        saveas()
def save2():
    global filename
    try:
        #f = open(filename, 'w')
        msg = textPad.get(1.0, 'end')
        outfilename =asksaveasfilename(initialfile='未命名.note', defaultextension='.note')
        with gzip.open(outfilename, 'wb') as output:
            with io.TextIOWrapper(output, encoding='utf-8') as enc:
                enc.write(msg)
        os.system('file -b --mime {}'.format(outfilename))
        runingpb()
    except:
        #saveas()
        pass
def saveas():
    f = asksaveasfilename(initialfile='未命名.txt', defaultextension='.txt')
    global filename
    filename = f
    fh = open(f, 'w')
    msg = textPad.get(1.0, 'end').replace(u'\xa0', u'').replace(u'\u3000', u'').replace(u'\u200b', u' ').replace(u'\xe4', u' ').replace(u'\xae', u' ').replace(u'\u2212', u' ').replace(u'\xa9', u' ').replace(u'\u2122', u' ').replace(u'\u2011', u' ').replace(u'\xb5', u' ').replace(u'\u2022', u' ').replace(u'\u2799', u' ').replace(u'\u2709', u' ')
    fh.write(msg)
    fh.close()
    root.title('Rogabet Notepad   '+os.path.basename(f))

def cut():
    global textPad
    textPad.event_generate('<<Cut>>')
def copy():
    global textPad
    textPad.event_generate('<<Copy>>')
def paste():
    global textPad
    textPad.event_generate('<<Paste>>')
def undo():
    global textPad
    textPad.event_generate('<<Undo>>')
def redo():
    global textPad
    textPad.event_generate('<<Redo>>')
def select_all():
    global textPad
    textPad.tag_add('sel', '1.0', END)
def find():
    global root
    global t
    t = Toplevel(root)
    t.title('查找替换+ 批量表求和+抽表指定行')
    # 设置窗口大小
    t.geometry('379x250+200+250')
    t.transient(root)
    v1 = StringVar()
    ttk.Label(t, text='查找字符串:').grid(row=0, column=0, sticky='e')
    ttk.Label(t, text='替换字符串:').grid(row=1, column=0, sticky='e')
    ttk.Entry(t, width=28, textvariable=v1).grid(row=1, column=1) # 替换为
    global v
    global e
    v = StringVar()
    e = ttk.Entry(t, width=11, textvariable=v)  #原文
    e.grid(row=0, column=1, padx=2, pady=2, sticky='we')
    e.focus_set()
    c = IntVar()
    ttk.Checkbutton(t, text='不区分大小写', variable=c).grid(row=2, column=1, sticky='e')
    ttk.Button(t, text='查找所有', command=lambda: search(v.get(), c.get(), textPad, t, e)).grid(row=0, column=3,
                                                                                             sticky='e' + 'w', padx=2,
                                                                                             pady=2)
    ttk.Button(t, text='替换所有', command=lambda: mytihuan(v1.get(), v.get())).grid(row=1, column=3,sticky='e' + 'w', padx=2, pady=2)
    ttk.Button(t, text='高级查找(A*Z)', command=advsearchtxt).grid(row=2, column=3, padx=2, pady=2)

    ttk.Label(t, text='下方输列名，点右边按钮选求和模板xlsx文件,').grid(row=3, column=0,columnspan=2, sticky='e' + 'w')
    ttk.Label(t, text='自动完成工作本内多子表指定列值的求和.').grid(row=4, column=0, columnspan=2,sticky='e' + 'w')
    qihelie = StringVar()
    ttk.Entry(t, width=28, textvariable=qihelie).grid(row=5, column=0,columnspan=2)
    def biaoqiuhe():
        import xlwings as xw
        import pandas as pd
        showinfo('提示', '求和模板xlsx文件在程序同目录.')
        app = xw.App(visible=False, add_book=False)
        qiuhexlsxPath = askopenfilename(defaultextension='.xlsx')
        workbook = app.books.open(qiuhexlsxPath)
        worksheet = workbook.sheets
        for i in worksheet:
            values = i.range('A1').expand('table')
            data = values.options(pd.DataFrame).value
            sums = data[qihelie.get()].sum()
            column = values.value[0].index(qihelie.get()) + 1
            row = values.shape[0]
            i.range(row + 1, column).value = sums
        workbook.save()
        workbook.close()
        app.quit()
        showinfo('提示', '文件处理完毕')

    ttk.Button(t, text='表格求和', command=biaoqiuhe).grid(row=5, column=3, padx=2, pady=2)

#抽表指定行
    ttk.Label(t, text='下方输列名和指定项目名，点右钮选抽取模板xlsx,').grid(row=6, column=0, columnspan=2, sticky='e' + 'w' )
    ttk.Label(t, text='将自动完成按照列名下的项目抽取行后打开结果表.').grid(row=7, column=0, columnspan=2, sticky='e' + 'w' )
    chouqulie = StringVar()
    ttk.Entry(t, width=11, textvariable=chouqulie).grid(row=8, column=0, )
    chouquwhat = StringVar()
    ttk.Entry(t, width=21, textvariable=chouquwhat).grid(row=8, column=1, )
    def chouqu():
        import xlwings as xw
        import pandas as pd
        print('帮你提取数据!')
        chouquexlsxPath = askopenfilename(defaultextension='.xlsx')
        app = xw.App(visible=False, add_book=False)
        workbook = app.books.open(chouquexlsxPath)
        worksheet = workbook.sheets
        data = []
        for i in worksheet:
            values = i.range('A1').expand().options(pd.DataFrame).value
            filtered = values[values[chouqulie.get()] == chouquwhat.get()]
            if not filtered.empty:
                data.append(filtered)
        new_workbook = xw.books.add()
        new_worksheet = new_workbook.sheets.add(chouquwhat.get())
        new_worksheet.range('A1').value = pd.concat(data, ignore_index=False)

        new_workbook.save('%s.xlsx' % chouquwhat.get())
        workbook.close()
        app.quit()
        showinfo('提示', '文件处理完毕')
        os.startfile('%s.xlsx' % chouquwhat.get())
    b2 = ttk.Button(t, text="获取结果表", width=12, command=chouqu)
    b2.grid(row=8, column=3)

        # tihuantext = Text(t, width=3, height=2)
    # def search(needle, cssnstv, textPad, t, e):  #
    #     textPad.tag_remove('match', '1.0', END)
    #     count = 0
    #     if needle:
    #         pos = '1.0'
    #         while True:
    #             pos = textPad.search(needle, pos, nocase = cssnstv, stopindex = END)  #
    #             if not pos: break
    #             # lastpos=0
    #             lastpos = pos + str(len(needle))
    #             # print(str(len(needle))+"-----"+needle)
    #             textPad.tag_add('match', pos, lastpos)
    #             count += 1
    #             pos = lastpos
    #             # print(pos)
    #         textPad.tag_config('match', foreground = 'lightyellow', background = 'green')
    #         e.focus_set()
    #         t.title(str(count) + '个被匹配')
    def close_search():
        textPad.tag_remove('match', '1.0', END)
        t.destroy()
    t.protocol('WM_DELETE_WINDOW', close_search)
def advsearchtxt():
    aa = entryvar.get()
    e.insert(0, aa)
    zz = entryvar2.get()
    super3 = re.findall(r"%s(.+?)%s" % (aa, zz), textPad.get(1.0, END))
    for j in aa:
        myaa = str(j)
        textPad.tag_config(myaa, foreground = 'red')
        def search(text_widget, keyword, tag):
            pos = '1.0'
            while True:
                idx = text_widget.search(keyword, pos, END)
                if not idx:
                    break
                pos = '{}+{}c'.format(idx, len(keyword))
                text_widget.tag_add(tag, idx, pos)
        search(textPad, myaa, myaa)
    for k in zz:
        myzz = str(k)
        textPad.tag_config(myzz, foreground = 'red')

        def search(text_widget, keyword, tag):
            pos = '1.0'
            while True:
                idx = text_widget.search(keyword, pos, END)
                if not idx:
                    break
                pos = '{}+{}c'.format(idx, len(keyword))
                text_widget.tag_add(tag, idx, pos)

        search(textPad, myzz, myzz)
    for i in super3:
        print(i)
        super4 = str(i)
        print('super4=', super4)
        textPad.tag_config(super4, foreground = 'red')  # sn4= abbcc', 'avvff
        def search(text_widget, keyword, tag):
            pos = '1.0'
            while True:
                idx = text_widget.search(keyword, pos, END)
                if not idx:
                    break
                pos = '{}+{}c'.format(idx, len(keyword))
                text_widget.tag_add(tag, idx, pos)
        search(textPad, super4, super4)
    
    if aa=='' and v.get()=='':
        os.startfile('pdftoolsbox\\pic2txt\\search.exe')
def mytihuan(tihuanwenben, yuanshiwenben):
    showinfo('hello', "替换成功")
    #find_data = yuanshiwenben.strip()
    #replace_data = tihuanwenben.strip()
    find_data = yuanshiwenben
    replace_data = tihuanwenben
    data = textPad.get(1.0, END)
    print("finddata" + find_data)
    data = data.replace(find_data, replace_data)
    textPad.delete(1.0, END)
    textPad.insert(1.0, data)
    # textPad.mark_set(data)

def search(needle,cssnstv,  textPad, t, e):#
    textPad.tag_remove('match', '1.0', END)
    count = 0
    if needle:
        pos = '1.0'
        while True:
            pos = textPad.search(needle, pos, nocase=cssnstv, stopindex=END)#
            if not pos: break
            #lastpos=0
            lastpos = pos + str(len(needle))
            #print(str(len(needle))+"-----"+needle)
            textPad.tag_add('match', pos, lastpos)
            count += 1
            pos = lastpos
            #print(pos)
        textPad.tag_config('match', foreground='yellow', background='green')
        e.focus_set()
        t.title(str(count) + '个被匹配')
#https://www.cnblogs.com/xuexidememeda/p/11093116.html?ivk_sa=1024320u
def popup(event):
    global editmenu
    editmenu.tk_popup(event.x_root, event.y_root)
def quit():

    exit()
def spk():
    from threading import Thread,Lock
    import pythoncom
    lock = Lock()
    def spkall():
        lock.acquire()
        pythoncom.CoInitialize()
        speaker = win32com.client.Dispatch("SAPI.SpVoice")
        msg = textPad.get(1.0, END)
        speaker.Speak(msg)
        lock.release()

    t1 = Thread(target = spkall)
    t1.start()



def spksel():
    from threading import Thread, Lock
    import pythoncom
    lock = Lock()

    def spkmysel():
        lock.acquire()
        pythoncom.CoInitialize()
        speaker = win32com.client.Dispatch("SAPI.SpVoice")
        msg2 = textPad.selection_get()
        speaker.Speak(msg2)
        lock.release()

    t2 = Thread(target = spkmysel)
    t2.start()
def toCn():
    appid = '2019626'
    secretKey = 'nRpvaLXkaKrIi'
    httpClient = None
    myurl = '/api/trans/vip/translate'
    content = textPad.get(1.0, END).replace('\n', '')
    old = textPad.get(1.0, END)
    q = content
    fromLang = 'en'  # 源语言
    toLang = 'zh'  # 翻译后的语言
    salt = random.randint(32768, 65536)
    sign = appid + q + str(salt) + secretKey
    sign = hashlib.md5(sign.encode()).hexdigest()
    myurl = myurl + '?appid=' + appid + '&q=' + urllib.parse.quote(
        q) + '&from=' + fromLang + '&to=' + toLang + '&salt=' + str(
        salt) + '&sign=' + sign
    httpClient = http.client.HTTPConnection('api.fanyi.baidu.com')
    httpClient.request('GET', myurl)
    # response是HTTPResponse对象
    response = httpClient.getresponse()
    jsonResponse = response.read().decode("utf-8")  # 获得返回的结果，结果为json格式
    js = json.loads(jsonResponse)  # 将json格式的结果转换字典结构
    if CheckVarEt.get() == 1:
        dst = str(js["trans_result"][0]["dst"]).replace('.','.\n').replace('。','。\n')  # 取得翻译后的文本结果
    else:
        dst = str(js["trans_result"][0]["dst"])
    #print(dst)  # 打印结果
    if CheckVarEt2.get() == 1:
        textPad3fanyi.delete(0.0, 'end')
        textPad3fanyi.insert('end', dst)
    else:
        out2 = old + '\n' + dst + '\n'
        textPad.delete(0.0, 'end')
        textPad.insert('end', out2)
    '''
appid = '2015105349'
secretKey = 'osubvw8qdQc41'
--
appid = '2367626'
secretKey = 'nRpvbOXkaKrIi'
    '''
def toEn():
    appid = '201967626'
    secretKey = 'nRLXkaKrIi'
    httpClient = None
    myurl = '/api/trans/vip/translate'
    content = textPad.get(1.0, END).replace('\n','')
    old=textPad.get(1.0, END)
    q = content
    fromLang = 'zh'  # 源语言
    toLang = 'en'  # 翻译后的语言
    salt = random.randint(32768, 65536)
    sign = appid + q + str(salt) + secretKey
    sign = hashlib.md5(sign.encode()).hexdigest()
    myurl = myurl + '?appid=' + appid + '&q=' + urllib.parse.quote(
        q) + '&from=' + fromLang + '&to=' + toLang + '&salt=' + str(
        salt) + '&sign=' + sign
    httpClient = http.client.HTTPConnection('api.fanyi.baidu.com')
    httpClient.request('GET', myurl)
    # response是HTTPResponse对象
    response = httpClient.getresponse()
    jsonResponse = response.read().decode("utf-8")  # 获得返回的结果，结果为json格式
    js = json.loads(jsonResponse)  # 将json格式的结果转换字典结构
    if CheckVarEt.get() == 1:
        dst = str(js["trans_result"][0]["dst"]).replace('.','.\n').replace('。','。\n')  # 取得翻译后的文本结果
    else:
        dst = str(js["trans_result"][0]["dst"])
    #print(dst)  # 打印结果
    if CheckVarEt2.get() == 1:
        textPad3fanyi.delete(0.0, 'end')
        textPad3fanyi.insert('end', dst)
    else:
        out2 = old + '\n' + dst + '\n'
        textPad.delete(0.0, 'end')
        textPad.insert('end', out2)
def printer():
    neirong = textPad.get(1.0, END)
    import win32print
    #filename = tempfile.mktemp(".txt")
    open("toprint.txt", "w").write(neirong)
    win32api.ShellExecute(
        0,
        "print",
        "toprint.txt",
        #
        # If this is None, the default printer will
        # be used anyway.
        #
        '/d:"%s"' % win32print.GetDefaultPrinter(),
        ".",
        0
    )
def toJp():
    appid = '2019126'
    secretKey = 'nRpvXkaKrIi'
    httpClient = None
    myurl = '/api/trans/vip/translate'
    content = textPad.get(1.0, END).replace('\n', '')
    old = textPad.get(1.0, END)
    q = content
    fromLang = 'zh'  # 源语言
    toLang = 'jp'  # 翻译后的语言
    salt = random.randint(32768, 65536)
    sign = appid + q + str(salt) + secretKey
    sign = hashlib.md5(sign.encode()).hexdigest()
    myurl = myurl + '?appid=' + appid + '&q=' + urllib.parse.quote(
        q) + '&from=' + fromLang + '&to=' + toLang + '&salt=' + str(
        salt) + '&sign=' + sign
    httpClient = http.client.HTTPConnection('api.fanyi.baidu.com')
    httpClient.request('GET', myurl)
    # response是HTTPResponse对象
    response = httpClient.getresponse()
    jsonResponse = response.read().decode("utf-8")  # 获得返回的结果，结果为json格式
    js = json.loads(jsonResponse)  # 将json格式的结果转换字典结构
    if CheckVarEt.get() == 1:
        dst = str(js["trans_result"][0]["dst"]).replace('.','.\n').replace('。','。\n')  # 取得翻译后的文本结果
    else:
        dst = str(js["trans_result"][0]["dst"])
    #print(dst)  # 打印结果
    if CheckVarEt2.get() == 1:
        textPad3fanyi.delete(0.0, 'end')
        textPad3fanyi.insert('end', dst)
    else:
        out2 = old + '\n' + dst + '\n'
        textPad.delete(0.0, 'end')
        textPad.insert('end', out2)
def fromJp():
    appid = '20000367626'
    secretKey = 'nRpLXkaKrIi'
    httpClient = None
    myurl = '/api/trans/vip/translate'
    content = textPad.get(1.0, END).replace('\n', '')
    old = textPad.get(1.0, END)
    q = content
    fromLang = 'jp'  # 源语言
    toLang = 'zh'  # 翻译后的语言
    salt = random.randint(32768, 65536)
    sign = appid + q + str(salt) + secretKey
    sign = hashlib.md5(sign.encode()).hexdigest()
    myurl = myurl + '?appid=' + appid + '&q=' + urllib.parse.quote(
        q) + '&from=' + fromLang + '&to=' + toLang + '&salt=' + str(
        salt) + '&sign=' + sign
    httpClient = http.client.HTTPConnection('api.fanyi.baidu.com')
    httpClient.request('GET', myurl)
    # response是HTTPResponse对象
    response = httpClient.getresponse()
    jsonResponse = response.read().decode("utf-8")  # 获得返回的结果，结果为json格式
    js = json.loads(jsonResponse)  # 将json格式的结果转换字典结构
    if CheckVarEt.get() == 1:
        dst = str(js["trans_result"][0]["dst"]).replace('.','.\n').replace('。','。\n')  # 取得翻译后的文本结果
    else:
        dst = str(js["trans_result"][0]["dst"])
    #print(dst)  # 打印结果
    if CheckVarEt2.get() == 1:
        textPad3fanyi.delete(0.0, 'end')
        textPad3fanyi.insert('end', dst)
    else:
        out2 = old + '\n' + dst + '\n'
        textPad.delete(0.0, 'end')
        textPad.insert('end', out2)
def toCht():
    appid = '2067626'
    secretKey = 'nRpLXkaKrIi'
    httpClient = None
    myurl = '/api/trans/vip/translate'
    content = textPad.get(1.0, END).replace('\n', '')
    old = textPad.get(1.0, END)
    q = content
    fromLang = 'zh'  # 源语言
    toLang = 'cht'  # 翻译后的语言
    salt = random.randint(32768, 65536)
    sign = appid + q + str(salt) + secretKey
    sign = hashlib.md5(sign.encode()).hexdigest()
    myurl = myurl + '?appid=' + appid + '&q=' + urllib.parse.quote(
        q) + '&from=' + fromLang + '&to=' + toLang + '&salt=' + str(
        salt) + '&sign=' + sign
    httpClient = http.client.HTTPConnection('api.fanyi.baidu.com')
    httpClient.request('GET', myurl)
    # response是HTTPResponse对象
    response = httpClient.getresponse()
    jsonResponse = response.read().decode("utf-8")  # 获得返回的结果，结果为json格式
    js = json.loads(jsonResponse)  # 将json格式的结果转换字典结构
    if CheckVarEt.get() == 1:
        dst = str(js["trans_result"][0]["dst"]).replace('.','.\n').replace('。','。\n')  # 取得翻译后的文本结果
    else:
        dst = str(js["trans_result"][0]["dst"])
    #print(dst)  # 打印结果
    if CheckVarEt2.get() == 1:
        textPad3fanyi.delete(0.0, 'end')
        textPad3fanyi.insert('end', dst)
    else:
        out2 = old + '\n' + dst + '\n'
        textPad.delete(0.0, 'end')
        textPad.insert('end', out2)
def fromCht():
    appid = '20191219000367626'
    secretKey = 'nRpvbOF3PgUaLXkaKrIi'
    httpClient = None
    myurl = '/api/trans/vip/translate'
    content = textPad.get(1.0, END).replace('\n', '')
    old = textPad.get(1.0, END)
    q = content
    fromLang = 'cht'  # 源语言
    toLang = 'zh'  # 翻译后的语言
    salt = random.randint(32768, 65536)
    sign = appid + q + str(salt) + secretKey
    sign = hashlib.md5(sign.encode()).hexdigest()
    myurl = myurl + '?appid=' + appid + '&q=' + urllib.parse.quote(
        q) + '&from=' + fromLang + '&to=' + toLang + '&salt=' + str(
        salt) + '&sign=' + sign
    httpClient = http.client.HTTPConnection('api.fanyi.baidu.com')
    httpClient.request('GET', myurl)
    # response是HTTPResponse对象
    response = httpClient.getresponse()
    jsonResponse = response.read().decode("utf-8")  # 获得返回的结果，结果为json格式
    js = json.loads(jsonResponse)  # 将json格式的结果转换字典结构
    if CheckVarEt.get() == 1:
        dst = str(js["trans_result"][0]["dst"]).replace('.','.\n').replace('。','。\n')  # 取得翻译后的文本结果
    else:
        dst = str(js["trans_result"][0]["dst"])
    #print(dst)  # 打印结果
    if CheckVarEt2.get() == 1:
        textPad3fanyi.delete(0.0, 'end')
        textPad3fanyi.insert('end', dst)
    else:
        out2 = old + '\n' + dst + '\n'
        textPad.delete(0.0, 'end')
        textPad.insert('end', out2)
def play():
    os.startfile("mp3player.exe")
def liteocr():
    os.startfile(os.getcwd()+"\\goldtools\\OCR.exe")
from tkinter.colorchooser import *
def bgcolormy():
    mycolor=askcolor()
    textPad.config(bg=mycolor[1])
def jietula():
    os.startfile(os.getcwd()+"\\goldtools\\pscr.exe")
def jisuanqi():
    os.startfile(os.getcwd() + "\\goldtools\\calc.exe")
def rddpdf():
    os.startfile(os.getcwd() + "\\FOXITREADER\\FOXITREADER.exe")
def tinytask():
    os.startfile("autotask.exe")
def tianshu():
    os.startfile(os.getcwd() + "\\goldtools\\daycalc.exe")
def play2():
    import webbrowser
    play_url='https://wx.qq.com/'
    #http://fy.iciba.com/
    webbrowser.open(play_url)
def youdao():
    import webbrowser
    play_url='http://fanyi.youdao.com/'
    webbrowser.open(play_url)
def ciba():
    import webbrowser
    play_url='http://www.iciba.com/fy'
    webbrowser.open(play_url)
def Unicode2HexStr():
    st=textPad.get(1.0, END)+'rogabet'
    Hex_Str = ""
    for i in range(0, len(st)):
        Hex_Str += (hex(ord(st[i])).replace('0x', '').zfill(4))
    textPad.delete(0.0, 'end')
    textPad.insert('end', Hex_Str)
def HexStr2Unicode():
    import login
    from login import liao2
    while login.liao==1:
        st2 = textPad.get(1.0, END)
        Unicde_Str = ""
        for i in range(0, len(st2) // 4):
            chr(int(st2[i * 4:i * 4 + 4], 16))
            Unicde_Str += chr(int(st2[i * 4:i * 4 + 4], 16))
        Unicde_Str = Unicde_Str.replace('rogabet','')
        textPad.delete(0.0, 'end')
        textPad.insert('end', Unicde_Str)
# def renlianjiemi():
#     import renlianwd
#     from renlianwd import liao3
#     while renlianwd.face == 1:
#         st3 = textPad.get(1.0, END)
#         Unicde_Str3 = ""
#         for i in range(0, len(st3) // 4):
#             chr(int(st3[i * 4:i * 4 + 4], 16))
#             Unicde_Str3 += chr(int(st3[i * 4:i * 4 + 4], 16))
#         Unicde_Str3 = Unicde_Str3.replace('rogabet', '')
#         textPad.delete(0.0, 'end')
#         textPad.insert('end', Unicde_Str3)
def play3():
    win32api.ShellExecute(0, 'open', 'C:\Program Files (x86)\Windows Media Player\wmplayer.exe', '', '', 1)

def sdmail():
    #import sdmail2
    #import importlib
    #importlib.reload(sdmail2)
    os.startfile("sdmail2.exe")
def getmail():
    showinfo('注意', '推荐安装foxmail后,即可把[rogabet-note\mail_inbox]收件文件夹里doc改名eml文件扩展名打开邮件，看到邮件附件等具体内容.')
    os.startfile("getnewmail2.exe")

def yyzwz2():
    if os.path.exists('C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'):
        import webbrowser as web
        url = 'https://app.xunjiepdf.com/voice2text'
        browser_path = r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'
        web.register('chrome', None, web.BackgroundBrowser(browser_path))
        web.get('chrome').open_new_tab(url)
    elif os.path.exists('C:\\Program Files\\Internet Explorer\\iexplore.exe'):
        import webbrowser as web
        url = 'https://app.xunjiepdf.com/voice2text'
        browser_path = r'C:\\Program Files\\Internet Explorer\\iexplore.exe'
        web.register('IE', None, web.BackgroundBrowser(browser_path))
        web.get('IE').open_new_tab(url)
    else:
        os.startfile("wxweb.exe")
        while not os.path.exists('C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'):
            time.sleep(3)
        import webbrowser as web
        url = 'https://app.xunjiepdf.com/voice2text'
        browser_path = r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'
        web.register('chrome', None, web.BackgroundBrowser(browser_path))
        web.get('chrome').open_new_tab(url)
def pngzwzyn():
    ret=askquestion('提示', '接下来一分钟里选择图片和获取文字，你可以提前准备图片到桌面，避免网络超时。文字编辑区域将冻结一分钟等待自动提取到的文字插入。 准备好图片了么？')
    if ret=='no':
        print('no')
    if ret=='yes':
        print('start')
        pngzwz()
def pngzwz():
    os.startfile("wenzsb2.exe")
    begin = datetime.now()
    while not os.path.exists('png2txt.txt'):
        time.sleep(3)
        end = datetime.now()
        dur=end-begin
        dur=dur.seconds
        print(dur)
        if dur ==45:
            with open("png2txt.txt", "a") as rbfile:
                rbfile.write( '* \n')
            showinfo('提示', '操作超时！')
    with open("png2txt.txt", "rt") as pngtxtfile:
        png2txt=pngtxtfile.read()
    time.sleep(2)
    textPad.insert('end', png2txt)
    time.sleep(1)
    shutil.copy('png2txt.txt', 'png2txt-bkp.txt')
    os.remove("png2txt.txt")
    def end_program(pro_name):
        os.system('%s%s' % ("taskkill /F /IM ", pro_name))
    end_program("wenzsb2.exe")
def txt2xlsxrd():
    ret=askquestion('提示', '列和列之间用tab分割，格式对了么？即将导出为xlsx表格，请选择保存位置。')
    if ret=='no':
        print('no')
    if ret=='yes':
        print('start')
        txt2xlsx()
        runingpb()
def txt2xlsx():
    neirongxlsx = textPad.get(1.0, END)
    fcsv=open("tocsv.txt", "w").write(neirongxlsx)
    #fcsv.close()
    csvFile2 = open("tmp.csv", 'w', newline='', encoding='GB2312')
    writer = csv.writer(csvFile2)
    csvRow = []
    f = open("tocsv.txt", 'r', encoding='GB2312')
    for line in f:
        csvRow = line.split()
        writer.writerow(csvRow)
    f.close()
    csvFile2.close()
    # --csv to xlsx
    from openpyxl import Workbook
    data_initial = open("tmp.csv", "r")
    sys.getdefaultencoding()
    workbook = Workbook()
    worksheet = workbook.worksheets[0]
    with data_initial as f:
        data = csv.reader((line.replace('\0', '') for line in data_initial), delimiter=",")
        for r, row in enumerate(data):
            for c, col in enumerate(row):
                for idx, val in enumerate(col.split('/')):
                    cell = worksheet.cell(row=r + 1, column=c + 1)
                    cell.value = val
    outfilename = asksaveasfilename(initialfile='未命名.xlsx', defaultextension='.xlsx')
    workbook.save(outfilename)
def bimanote():
    os.startfile("notepadsub.exe")
def robot():
    os.startfile("robot.exe")
def paint():
    os.startfile('mspaint.exe')
def tpzwz():
    if os.path.exists('C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'):
        import webbrowser as web
        url = 'https://ocr.wdku.net/'
        url2tp= 'https://pearocr.com/'
        browser_path = r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'
        web.register('chrome', None, web.BackgroundBrowser(browser_path))
        web.get('chrome').open_new_tab(url)
        web.get('chrome').open_new_tab(url2tp)
    elif os.path.exists('C:\\Program Files\\Internet Explorer\\iexplore.exe'):
        import webbrowser as web
        url = 'https://ocr.wdku.net/'
        url2tp = 'https://pearocr.com/'
        browser_path = r'C:\\Program Files\\Internet Explorer\\iexplore.exe'
        web.register('IE', None, web.BackgroundBrowser(browser_path))
        web.get('IE').open_new_tab(url)
        web.get('IE').open_new_tab(url2tp)
    else:
        os.startfile("wxweb.exe")
        while not os.path.exists('C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'):
            time.sleep(3)
        import webbrowser as web
        url = 'https://ocr.wdku.net/'
        url2tp = 'https://pearocr.com/'
        browser_path = r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'
        web.register('chrome', None, web.BackgroundBrowser(browser_path))
        web.get('chrome').open_new_tab(url)
        web.get('chrome').open_new_tab(url2tp)
        #http://www.dayanzai.me/copyq.html copyq
def ynote():
    if os.path.exists('C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'):
        import webbrowser as web
        url = 'https://note.youdao.com/web'
        browser_path = r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'
        web.register('chrome', None, web.BackgroundBrowser(browser_path))
        web.get('chrome').open_new_tab(url)
    else:
        os.startfile("wxweb.exe")
        while not os.path.exists('C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'):
            time.sleep(3)
        import webbrowser as web
        url = 'https://note.youdao.com/'
        url2 = 'https://note.youdao.com/web'
        browser_path = r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'
        web.register('chrome', None, web.BackgroundBrowser(browser_path))
        web.get('chrome').open_new_tab(url)
        time.sleep(2)
        web.get('chrome').open_new_tab(url2)
def wkweb():
    import webbrowser
    play_url = 'http://www.yunsuan.info/matrixcomputations/solvelinearsystems.html'
    webbrowser.open(play_url)
    url2jfc = 'http://www.jfc120.com/'
    time.sleep(2)
    webbrowser.open(url2jfc)

def wdzh():
    import webbrowser
    play_url = 'https://cn.office-converter.com/'
    webbrowser.open(play_url)
    time.sleep(2)
    play_url2 = 'https://www.ilovepdf.com/'
    webbrowser.open(play_url2)
def qrcodes():
    import webbrowser
    play_url = 'https://cli.im/'
    webbrowser.open(play_url)
def fly():
    if os.path.exists('C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'):
        import webbrowser as web
        #url = 'https://baike.baidu.com/'
        #url2 = 'https://app.sharetome.com/login'
        url3 = 'https://mind.airmore.cn/guest?apptype=ads-bd'
        browser_path = r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'
        web.register('chrome', None, web.BackgroundBrowser(browser_path))
        #web.get('chrome').open_new_tab(url)
        #time.sleep(2)
        #web.get('chrome').open_new_tab(url2)
        time.sleep(2)
        web.get('chrome').open_new_tab(url3)
    else:
        os.startfile("wxweb.exe")
        while not os.path.exists('C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'):
            time.sleep(3)
        import webbrowser as web
        #url = 'https://baike.baidu.com/'
        #url2 = 'http://www.jfc120.com/'
        url3 = 'https://mind.airmore.cn/guest?apptype=ads-bd'

        browser_path = r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'
        web.register('chrome', None, web.BackgroundBrowser(browser_path))
        #web.get('chrome').open_new_tab(url)
        #time.sleep(2)
        #web.get('chrome').open_new_tab(url2)
        time.sleep(2)
        web.get('chrome').open_new_tab(url3)
def flymenu():
    try:
        os.startfile("fly.exe")
    finally:
        os.startfile("pscr2.exe")
def oldppt():
    os.startfile("PPTVIEW.EXE")
def xtjt():
    os.startfile("SnippingTool.exe")
def newpptx():
    # python-pptx #add it in pycharm to import pptx
    import pptx
    global pptxfile

    pptxfile = askopenfilename(defaultextension='.pptx')
    presentation = pptx.Presentation(pptxfile)
    results = []
    for slide in presentation.slides:
        for shape in slide.shapes:
            if shape.has_text_frame:
                for paragraph in shape.text_frame.paragraphs:
                    part = []
                    for run in paragraph.runs:
                        part.append(run.text)
                    results.append(''.join(part))
    results = [line+'\n' for line in results if line.strip()]
    runingpb()
    textPad.insert('end', results)
def newpptxplay():
    global pptxfile
    pptxfile = askopenfilename(defaultextension='.ppt')
    ppt = win32com.client.Dispatch('PowerPoint.Application')
    ppt.Visible = 1
    pptSel = ppt.Presentations.Open(pptxfile)
    win32com.client.gencache.EnsureDispatch('PowerPoint.Application')
    #ppt.Quit()
def haha():
    import login
    from login import liao2
    if login.liao == 1:
        import editps
def fanyisuoming():
    readdme='''
开发作者：Rogabet (Robin.luo)
开发时间：2019-4-1 to 2022-2-23
AI-TSP记事本功能如下:1 文字生成二维码（中间可以加图片）。 
2  保存为note特殊格式，只有本软件可以看。3 插入机器硬件信息 
4 可以插入csv word-docx pdf pptx excel-xlsx文件的文字
5 朗读全文，朗读选句 选词 6 中日英 翻译，7 繁体 简体 互换
8 图片的文字提取 9 发微信 或 群发 10  加密文件 AES RSA DES
11 收发邮件 12查询发邮件历史记录 14 语音转文字
15 导出excel表 16 pdf转图片 17批量word转pdf
18 rtf图文并茂编辑 19多表合并 20批量pptx转pdf
21 多图或者单图合并为pdf 22 PDF翻译 23云暂存
具体功能加载显示在'使用手册'区域。
    '''
    showinfo('关于',readdme )
    runingpb()
    textPad4use_manual.delete(1.0, END)
    with open('detail-use.txt', 'r')as usemanual:
        contentmanual = usemanual.read()
        textPad4use_manual.insert(1.0, contentmanual)
def jiamidabao():
    showinfo('提示', '文件为程序同一目录的dict.note')
    content = textPad.get(1.0, END)
    outfilename='dict.note'
    with gzip.open(outfilename,'wb') as output:
        with io.TextIOWrapper(output,encoding='utf-8') as enc:
            enc.write(content)
    os.system('file -b --mime {}'.format(outfilename))
def jiemijiebao():
    showinfo('提示', '文件为程序同一目录的dict.note')
    with gzip.open('dict.note','rb') as input:
        with io.TextIOWrapper(input,encoding='utf-8') as dec:
            content2=dec.read()
            textPad.insert(1.0, content2)
def aesone():
    bufferSize=64*1024
    password="rogabet"
    global aesonefile
    aesonefile = askopenfilename(defaultextension='.txt')
    with open(aesonefile,'rb')as fin:
        with open(aesonefile+'.aes', 'wb')as fout:
            pyAesCrypt.encryptStream(fin,fout,password,bufferSize)
    encFileSize=stat(aesonefile+'.aes').st_size
def unaesone():
    bufferSize = 64 * 1024
    password = "rogabet"
    global unaesonefile
    unaesonefile = askopenfilename(defaultextension='.aes')
    encFileSize = stat(unaesonefile).st_size
    unaesonefileout = asksaveasfilename(initialfile='未命名.txt', defaultextension='.txt')
    with open(unaesonefile, 'rb')as fin:
        with open(unaesonefileout, 'wb')as fout:
            try:
                pyAesCrypt.decryptStream(fin, fout, password, bufferSize,encFileSize)
            except ValueError:
                remove(aesonefile)
def convertUTF8ToANSI():
    global oldfile
    oldfile=askopenfilename(defaultextension='.txt')
    global newfile
    newfile = asksaveasfilename(initialfile='-ansi编码.txt', defaultextension='.txt')
    fp_ansi = open(newfile, 'wb')  # 转码后输出的文件
    fp_utf8 = open(oldfile, 'rb')  # 待转码的文件
    data = ""
    data = fp_utf8.read()
    data = data.decode('utf-8')  # 以二进制格式读入的数据需要先转码（转为内部码）才可以继续转换
    data = data.encode('mbcs', errors='ignore')  # 关键，将内部码再次编码
    fp_ansi.write(data)  # 写入文件
    fp_ansi.close()
    fp_utf8.close()
def yun_note():
    showinfo('云暂存', '把文件保存到即将打开的文件夹,用户名为user 密码Fruit123，(登录后先刷新，高级账号需要管理员发放).路径依据ftpaddr配置.')
    with open(r'ftpaddr.txt', 'r') as ftpbkn:
        myftpaddr = ftpbkn.read()
    start_directory =  myftpaddr
    os.system("explorer.exe %s" % start_directory)

def open_mail_inbox():
    start_directory = os.getcwd() + '\mail_inbox'
    os.system("explorer.exe %s" % start_directory)
def pdfbox():
    start_directory =os.getcwd()+ '\pdftoolsbox'
    os.system("explorer.exe %s" % start_directory)
def pdftoimgha():
    showinfo('提示', '万一PDF多页，一些 PNG 图片文件会产生在PDF文件同目录,请准备空文件夹后把PDF文件放入，即将选择PDF文件.')
    pdfPath =askopenfilename(defaultextension='.pdf')
    doc = fitz.open(pdfPath)
    pdf_name = os.path.splitext(pdfPath)[0]
    for pg in range(doc.pageCount):
        page = doc[pg]
        rotate = int(0)
        # 每个尺寸的缩放系数为2，这将为我们生成分辨率提高四倍的图像。
        zoom_x = 2.0
        zoom_y = 2.0
        trans = fitz.Matrix(zoom_x, zoom_y).preRotate(rotate)
        pm = page.getPixmap(matrix=trans, alpha=False)
        pm.writePNG('%s-%s.png'%(pdf_name,pg))
    showinfo('提示', '文件产生完毕')
def addpdf():
    global addpdffile
    addpdffile = askopenfilename(defaultextension='.pdf')
    with openpd(addpdffile) as pdf:
        numpages = len(pdf.pages)
        for i in range(0, numpages):
            read_page = pdf.pages[i]
            #print(read_page.extract_text())
            textPad.insert('end', read_page.extract_text())
            textPad.insert('end', '\n-----\n')
    #runingpb()
import docx
#pip install python_docx
def adddocx():
    global adddocxfile
    adddocxfile = askopenfilename(defaultextension='.docx')
    wdoc=docx.Document(adddocxfile)
    docxnumparas = len(wdoc.paragraphs)
    for i in range(0, docxnumparas):
        readdocx_para =wdoc.paragraphs[i].text
        textPad.insert('end', readdocx_para)
        textPad.insert('end', '\n')
    runingpb()
def addcsv():
    global addcsvfile
    addcsvfile = askopenfilename(defaultextension='.csv')
    csv_file=open(addcsvfile,'r')
    with csv_file:
        read_csv=csv.reader(csv_file)
        for row in read_csv:
            textPad.insert('end', row)
            textPad.insert('end', '\n')
    runingpb()
from openpyxl import load_workbook
def addxlsx():
    global addxlsxfile
    addxlsxfile = askopenfilename(defaultextension='.xlsx')
    wb = load_workbook(addxlsxfile)
    # 获取workbook中所有的表格
    sheets = wb.sheetnames
    print(sheets)
    # 循环遍历所有sheet
    for i in range(len(sheets)):
        sheet = wb[sheets[i]]
        print('\n\n第' + str(i + 1) + '个工作表: ' + sheet.title + '->>>\n')
        textPad.insert('end', '\n\n第' + str(i + 1) + '个工作表: ' + sheet.title + '->>>\n')
        for r in range(1, sheet.max_row + 1):
            if r == 1:
                partt01=''.join(
                    [str(sheet.cell(row=r, column=c).value).ljust(17) for c in range(1, sheet.max_column + 1)]).replace('None','')

                print( ''.join(
                    [str(sheet.cell(row=r, column=c).value).ljust(17) for c in range(1, sheet.max_column + 1)]))
                textPad.insert('end',partt01)
                textPad.insert('end', '\n')
            else:
                partt02 = ''.join([str(sheet.cell(row=r, column=c).value).ljust(17) for c in range(1, sheet.max_column + 1)]).replace('None','')
                print(
                     ''.join([str(sheet.cell(row=r, column=c).value).ljust(17) for c in range(1, sheet.max_column + 1)]))
                textPad.insert('end', partt02)
                textPad.insert('end', '\n')
    runingpb()

c = wmi.WMI()
def addpcinfo():
    global list
    list = []
    def info():
        list.append("电脑硬件信息")
        list.append("\n")
        for interface in c.Win32_NetworkAdapterConfiguration(IPEnabled=1):
            print(interface.MACAddress)
            macaddr = interface.MACAddress
            for plan_planess in interface.IPAddress:
                print(plan_planess)
        for BIOSs in c.Win32_ComputerSystem():
            list.append("主 机 名: %s" % BIOSs.Caption)
            list.append("用 户 名: %s" % BIOSs.UserName)
            list.append("\n")
        for BIOS in c.Win32_BIOS():
            list.append("Bios描述: %s" % BIOS.Description)
            list.append("序列号: %s" % BIOS.SerialNumber)
            list.append("\n")
        for processor in c.Win32_Processor():
            list.append("CPU型号: %s" % processor.Name.strip())
            list.append("CPU内核: %s 个" % processor.NumberOfCores )
            list.append("CPU基准频率: %s GHz" % (processor.MaxClockSpeed / 1000 ))
            list.append("\n")
        for memmodule in c.Win32_PhysicalMemory():
            totalmemsize = int(memmodule.Capacity)
            list.append("内存厂商: %s" % memmodule.Manufacturer.replace('80AD000080AD','海力士').replace('04CB','威刚'))
            list.append("内存型号: %s" % memmodule.PartNumber)
            list.append("内存大小: %.2fGB" % (totalmemsize / 1024 ** 3))
            list.append("\n")
            try:
                list.append("内存频率: %s MHz" % memmodule.ConfiguredClockSpeed)
                list.append("\n")
            except :
                    print('mem output error')
        for xk in c.Win32_VideoController():
            list.append("显卡名称: %s" % xk.name)
            #list.append("视频适配器的内存: %s MB" % (xk.AdapterRAM / 1024 ** 2))
            list.append("\n")
            #https://blog.csdn.net/yw1688/article/details/52386859
        for snk in c.Win32_SoundDevice():
            list.append("声卡名称: %s" % snk.name)
            list.append("\n")
        for disk in c.Win32_DiskDrive(InterfaceType="IDE"):
            diskSize = int(disk.size)
            list.append("磁盘名称: %s" % disk.Caption)
            list.append("\n")
            list.append("磁盘大小: %.2fGB" % (diskSize / 1024 ** 3))
            list.append("\n")
            list.append("磁盘序列号: %s" % disk.SerialNumber)
            list.append("\n")
            list.append("驱动器类型 : %s" % disk.InterfaceType    )
            list.append("\n")
        for disk in c.Win32_DiskDrive(InterfaceType="SCSI"):
            diskSize = int(disk.size)
            list.append("磁盘名称: %s" % disk.Caption)
            list.append("\n")
            list.append("磁盘大小: %.2fGB" % (diskSize / 1024 ** 3))
            list.append("\n")
            list.append("磁盘序列号: %s" % disk.SerialNumber)
            list.append("\n")
            list.append("驱动器类型 : %s" % disk.InterfaceType)
            list.append("\n")
        for disk in c.Win32_DiskDrive(InterfaceType="HDC"):
            diskSize = int(disk.size)
            list.append("磁盘名称: %s" % disk.Caption)
            list.append("\n")
            list.append("磁盘大小: %.2fGB" % (diskSize / 1024 ** 3))
            list.append("\n")
            list.append("磁盘序列号: %s" % disk.SerialNumber)
            list.append("\n")
            list.append("驱动器类型 : %s" % disk.InterfaceType)
            list.append("\n")
        for disk in c.Win32_DiskDrive(InterfaceType="1394"):
            diskSize = int(disk.size)
            list.append("磁盘名称: %s" % disk.Caption)
            list.append("\n")
            list.append("磁盘大小: %.2fGB" % (diskSize / 1024 ** 3))
            list.append("\n")
            list.append("磁盘序列号: %s" % disk.SerialNumber)
            list.append("\n")
            list.append("驱动器类型 : %s" % disk.InterfaceType)
            list.append("\n")
        for interface in c.Win32_NetworkAdapterConfiguration(IPEnabled=1):
            list.append("当前IP地址: %s" % interface.IPAddress[0])
            list.append("当前MAC地址: %s" % macaddr)
            list.append("\n")
    info()
    #runingpb()
    textPad.insert('end', list)
def downhtml():
    aa = entryvar.get()
    zz = entryvar2.get()
    geturl1 = fromurl1.get() + aa +zz
    #headers = {'User-Agent': 'Mozlila/5.0'}
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'
    }
    #r = requests.get(geturl1)
    r = requests.get(geturl1,headers=headers)
    #r.encoding = r.apparent_encoding
    outfilenamehtml = asksaveasfilename(initialfile='未命名.html', defaultextension='.html')

    with open(outfilenamehtml, "w", encoding='utf-8') as out_html:
        out_html.writelines(r.content.decode())

    runingpb()  # 进度条
    os.startfile(outfilenamehtml)
def webgogo():
    import webbrowser
    geturl2web = fromurl1.get()
    webbrowser.open(geturl2web)
def longpic2():
    os.startfile('fsclong.exe')

def longpic():
    import webbrowser as web
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options
    geturl2fsclong = fromurl1.get()
    if os.path.exists('C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'):

        options = Options()
        options.add_argument('--headless')

        driver = webdriver.Chrome(options=options)
        driver.get(geturl2fsclong)
        #driver.switch_to.window(driver.window_handles[1]) #切换第二个网页 会用到它
        width = driver.execute_script("return document.documentElement.scrollWidth")
        height = driver.execute_script("return document.documentElement.scrollHeight")
        print(width, height, '0')
        driver.set_window_size(width, height)
        time.sleep(3)
        driver.save_screenshot('longpic.png')
        os.startfile('longpic.png')
        time.sleep(1)
        driver.quit()
    else:
        os.startfile("wxweb.exe")
        while not os.path.exists('C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'):
            time.sleep(3)
        options = Options()
        options.add_argument('--headless')
        driver = webdriver.Chrome(options=options)
        driver.get(geturl2fsclong)
        #driver.switch_to.window(driver.window_handles[1])
        width = driver.execute_script("return document.documentElement.scrollWidth")
        height = driver.execute_script("return document.documentElement.scrollHeight")
        print(width, height, '0')
        driver.set_window_size(width, height)
        time.sleep(3)
        driver.save_screenshot('longpic.png')
        os.startfile('longpic.png')
        time.sleep(1)
        driver.quit()

import threading
def savePerFive():
    def fun_timer():
        print('Hello Timer!')
        save()
        global timer
        timer = threading.Timer(600, fun_timer)
        timer.start()
    timer = threading.Timer(1, fun_timer)
    timer.start()
#from multiprocessing import Process
# def copyfile(file):
#     cmd = 'copy ' + file + " " + file + ".bak"
#     res = os.popen(cmd)      # # 用到进程的方法，需要等这个拷贝的子进程执行完了，再执行主进程
def uuu2chn():
    pass
    neirong_uuu = textPad.get(1.0, END)
    myuuu = neirong_uuu
    uuu2 = myuuu.encode('utf-8').decode('unicode_escape')
    print(uuu2)  # 转化为中文
    textPad.delete(0.0, 'end')
    textPad.insert(1.0, uuu2)
    textPad3fanyi.delete(0.0, 'end')
    textPad3fanyi.insert(1.0, neirong_uuu)
def aaa_bbb():
    showinfo('用法', '比如首行"aaabbb"中间空格后输入"bbb",第二行"cccddd"中间空格后"ddd"，那么最后变成第一行aaa 第二行ccc。意思是每一行空格右边字符串为参考,去删除同一行空格左边一样的字符段，输出到文本编辑区，而且原文显示到翻译区。得到结果可利用文件菜单导出表格xlsx文件.（确保最后一行没有多余回车）临时备份在 程序同目录 原文aaa_bbb.txt 新文aaatmp.txt')
    neirongAAAbbb = textPad.get(1.0, END)
    fAAA = open("aaa_bbb.txt", "w").write(neirongAAAbbb) #fAAA.close()
    filenameAAA = r'aaa_bbb.txt'
    fbbb = open(filenameAAA, 'r')
    line = fbbb.readline()
    all_line = []
    while line:
        my_aaa_bbb_left = line.split(' ')[0]
        print(my_aaa_bbb_left)  # aaabbb
        my_aaa_bbb_right = line.split(' ')[1]
        print(my_aaa_bbb_right)  # bbb
        my_aaa_bbb_right2 = my_aaa_bbb_right.replace('\n', '')
        new_aaa1 = my_aaa_bbb_left.replace(my_aaa_bbb_right2, '')
        # new_aaa2=new_aaa.replace(my_aaa_bbb_right,'')
        print(new_aaa1)  # aaa
        _strline = line  # aaabbb
        _str_kill = my_aaa_bbb_right
        _str_new = new_aaa1  # aaa1
        index = line.find(my_aaa_bbb_right2)
        if index != -1:
            line = line.replace(_strline, new_aaa1)
            print(line+'\n')
        all_line.append(line+'\n')
        line = fbbb.readline()
    print(all_line)
    fbbb.close()
    fccc = open('aaatmp.txt', 'w')
    for line in all_line:
        fccc.write(line)
    fccc.close()
    f3ccc = open('aaatmp.txt', 'r')
    textPad.delete(0.0, 'end')
    textPad.insert(1.0, f3ccc.read())
    textPad3fanyi.delete(0.0, 'end')
    textPad3fanyi.insert(1.0, neirongAAAbbb)
def savePer10ff():

    timer.cancel()
    print('off Timer!')
def runingpb():

    for i in range(100):
        pb['value']=i+20
        root.update()
        time.sleep(0.05)
def downzip():
    import urllib
    geturl1 = fromurl1.get()
    showinfo('提示', '开始下载，耐心等待进度条走完，完毕后会打开,现在先选择保存位置和定义文件名')
    outfilenamezip = asksaveasfilename(initialfile='未命名.zip', defaultextension='.zip')
    urllib.request.urlretrieve(geturl1, outfilenamezip)
    runingpb()  # 进度条
    os.startfile(outfilenamezip)
    #gentry.delete(0, END)
    #http://rogabet.xyz/p5---.zip

def send_mail2():
    neirongmail = textPad.get(1.0, END)
    fromaddr = frommvar3.get()
    mailpass2 =mailpassvar.get()
    mailsmtp=mailsmtpvar.get()
    mailtitle=mailtitlevar.get()
    towho=getmvar3.get()
    import smtplib
    from email.mime.text import MIMEText
    from email.header import Header
    from email.mime.multipart import MIMEMultipart
    # to_addr = '664287094@qq.com' # 收信方邮箱
    from_addr = fromaddr
    password =mailpass2
    smtp_server = mailsmtp
    # 邮箱正文内容，第一个参数为内容，第二个参数为格式(plain 为纯文本)，第三个参数为编码
    msg = MIMEText(neirongmail, 'plain', 'utf-8')
    # 邮件头信息
    msg['From'] = Header(from_addr)
    msg['To'] = Header(towho)
    msg['Subject'] = Header(mailtitle)
    # 开启发信服务，这里使用的是加密传输
    server = smtplib.SMTP_SSL(smtp_server)
    server.connect(smtp_server, 465)
    # 登录发信邮箱
    server.login(from_addr, password)
    # 发送邮件
    server.sendmail(from_addr, towho, msg.as_string())
    # 关闭服务器
    server.quit()
    showinfo('提示', '邮件发送完毕')
    # 增加mail记录
    try:
        conn = sqlite3.connect("mailoutlog.db")
        cursor = conn.cursor()
        new_addr_out = towho
        new_title = mailtitle
        new_mailcontent = neirongmail
        newlog = (new_addr_out, new_title, new_mailcontent)
        sql = '''INSERT into mailoutlog values(?,?,?)'''
        cursor.execute(sql, newlog)
        conn.commit()
        cursor.close()
        conn.close()
    except:
        print('mail log fail')
    if CheckVarEt3att.get() == 1:
        sender =fromaddr
        receivers = towho  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱
        # 创建一个带附件的实例
        message = MIMEMultipart()
        message['From'] = Header(from_addr, 'utf-8')
        message['To'] = Header(towho, 'utf-8')
        message['Subject'] = Header(mailtitle, 'utf-8')
        # 邮件正文内容
        message.attach(MIMEText(neirongmail, 'plain', 'utf-8'))
        att3filen = askopenfilename(title = '选个附件发送', defaultextension = '*.zip')
        send_mailattfile = open(att3filen, "rb").read()
        att1 = MIMEText(send_mailattfile, "base64", 'utf-8')
        att1["Content-Type"] = 'application/octet-stream'
        # 这里的filename可以任意写，写什么名字，邮件中显示什么名字
        index = att3filen.rfind('.')
        left_name_att3filen = att3filen[:index]  #去掉扩展
        index2 =left_name_att3filen.rfind('/')
        middle_truwname_att3filen=left_name_att3filen[index2:] #qudiao lujing
        print(middle_truwname_att3filen)
        addnamebelow=middle_truwname_att3filen.replace('/','')+att3filen[index:]
        print(addnamebelow)
        att1["Content-Disposition"] = 'attachment; filename=%s'%addnamebelow
        message.attach(att1)
        try:
            # smtpObj = smtplib.SMTP(smtp_server)
            # smtpObj.sendmail(sender, receivers, message.as_string())
            server = smtplib.SMTP_SSL(smtp_server)
            server.connect(smtp_server, 465)
            # 登录发信邮箱
            server.login(from_addr, password)
            # 发送邮件
            server.sendmail(from_addr, towho, message.as_string())
            # 关闭服务器
            server.quit()
            showinfo('提示', '附件发送完毕')
        except smtplib.SMTPException:
            showinfo('提示', '邮件发送失败')
        try:
            conn = sqlite3.connect("mailoutlog.db")
            cursor = conn.cursor()
            new_addr_out = towho
            new_title = mailtitle
            new_mailcontent = neirongmail
            newlog = (new_addr_out, new_title, new_mailcontent)
            sql = '''INSERT into mailoutlog values(?,?,?)'''
            cursor.execute(sql, newlog)
            conn.commit()
            cursor.close()
            conn.close()
        except:
            print('mail log fail')
def superfind():
    aa=entryvar.get()
    zz=entryvar2.get()
    print(aa)
    print(zz)
    super= re.findall(r"%s(.+?)%s"%(aa,zz), textPad.get(1.0, END))
    print('super=', super)  #
    for i in super:
        print(i)
        super2 = str(i)
        print('super2=', super2)
        textPad.tag_config(super2,foreground='red')  #sn4= abbcc', 'avvff
        def search(text_widget, keyword, tag):
            pos = '1.0'
            while True:
                idx = text_widget.search(keyword, pos, END)
                if not idx:
                    break
                pos = '{}+{}c'.format(idx, len(keyword))
                text_widget.tag_add(tag, idx, pos)
        search(textPad, super2,super2)
#------------guolv
def guolv():
    guolv1 = textPad.get(1.0, END)
    guolv2 = guolv1.replace('\n\n\n\n\n', '\n')
    guolv3 = guolv2.replace('\n\n\n', '\n')
    guolv4 = guolv3.replace('\n\n', '\n')
    textPad.delete(1.0, END)
    textPad.insert(END, guolv4)
#-------------guolv
def familyChanged(event):
    f=Font(family=familyVar.get(),size=sizeVar.get(),weight=weightVar.get())
    textPad.configure(font=f)
    textPad2mail_log.configure(font=f)
    textPad3fanyi.configure(font=f)
def weightChanged(event):
    f=Font(weight=weightVar.get(),family=familyVar.get(),size=sizeVar.get())
    textPad.configure(font=f)
    textPad2mail_log.configure(font=f)
    textPad3fanyi.configure(font=f)
def sizeSelected(event):
    f = Font(size=sizeVar.get(),family=familyVar.get(),weight=weightVar.get())
    textPad.configure(font=f)
    textPad2mail_log.configure(font=f)
    textPad3fanyi.configure(font=f)

import json
from threading import Timer
from wxpy import *
import requests
import urllib.parse
def send_wxnews():
    wxname = nickwxvar.get()
    if wxname=='':
        showinfo('hello', "'发微信'按钮右边 空白处填写昵称\备注，然后点'发微信'，手机微信扫二维码授权，就会发出编辑区正文,选择zip英文名小文件，可以发出附件rar/zip只允许包含500KB文档")
    else:
        global wxcontent
        wxcontent=textPad.get(1.0, END)
        bot = Bot(cache_path=True)  # 连接微信,会出现一个登陆微信的二维码
        my_friend = bot.friends().search(wxname)[0]
        my_friend.send(wxcontent)
def send_wxfile():
    if CheckVar1.get()==1:
        wxname = nickwxvar.get()
        bot = Bot(cache_path=True)  # 连接微信,会出现一个登陆微信的二维码
        my_friend = bot.friends().search(wxname)[0]
        wxfilen = askopenfilename(title='选个500KB内的zip或rar文件作为微信附件发送',defaultextension='*.zip')
        my_friend.send_file(wxfilen)
def printerset():
    os.system('control.exe /name Microsoft.Printers')
def createmaillog():
    conn=sqlite3.connect("mailoutlog.db")
    cursor=conn.cursor()
    sql='''Create table mailoutlog(
    addr_out text,
    title text,
    mailcontent text)'''
    cursor.execute(sql)
    cursor.close()
    conn.close()
def searchmaillog():
    textPad2mail_log.delete(1.0, END)
    #historytitle = getmvar5.get()
    conn = sqlite3.connect("mailoutlog.db")
    cursor = conn.cursor()
    sql = '''SELECT addr_out,title,mailcontent
            from mailoutlog'''
    results=cursor.execute(sql)
    allmaillogs=results.fetchall()
    for maillog in allmaillogs:
        textPad2mail_log.insert('end', maillog)
        textPad2mail_log.insert('end', '\n' + '*' * 88 + '\n')
    cursor.close()
    conn.close()
def searchmailtolog():
    textPad2mail_log.delete(1.0, END)
    historymailto = getmvar5.get()
    conn = sqlite3.connect("mailoutlog.db")
    cursor = conn.cursor()
    sql = '''SELECT addr_out,title,mailcontent
                from mailoutlog where addr_out=?'''
    values = cursor.execute(sql, (historymailto,))
    for i in values:
        print('id:', i[0])
        textPad2mail_log.insert('end', '收件人: '+i[0]+'\n')
        textPad2mail_log.insert('end','标题: '+ i[1]+'\n')
        textPad2mail_log.insert('end','内容: '+ i[2]+'\n')
        textPad2mail_log.insert('end', '\n' + '*' * 88 + '\n')
    cursor.close()
    conn.close()

#数据库模糊搜索邮件标题
def searchmailttlog():
    textPad2mail_log.delete(1.0, END)
    historymailtt = getmvar6bt.get()
    conn = sqlite3.connect("mailoutlog.db")
    cursor = conn.cursor()
    sql = '''SELECT addr_out,title,mailcontent
                from mailoutlog where title like ?'''
    values = cursor.execute(sql, ('%'+historymailtt+'%',))
    for itt in values:
            textPad2mail_log.insert('end', '收件人: '+itt[0]+'\n')
            textPad2mail_log.insert('end','标题: '+ itt[1]+'\n')
            textPad2mail_log.insert('end', '内容: '+itt[2]+'\n')
            textPad2mail_log.insert('end', '\n' + '*' * 88 + '\n')
    cursor.close()
    conn.close()
def zhuti06():
    s = ttk.Style()       #ok
    s.theme_use('scidpink')
    textPad.config(bg='LavenderBlush')

    root.config(bg = 'LavenderBlush')# 赤色
    family["menu"].config(activebackground = 'LavenderBlush', activeforeground = 'red',bg='Pink')
    weight["menu"].config(activebackground = 'LavenderBlush', activeforeground = 'red',bg='PaleVioletRed')
    menubutton_show.menu.config(activebackground = 'LavenderBlush', activeforeground = 'red',bg='Salmon')
    root.option_add("*TCombobox*Listbox*Background", 'HotPink')  # 设置combobox背景色
    filemenu.config(activebackground='LavenderBlush', activeforeground='red', bg='Salmon')
    editmenu.config(activebackground='LavenderBlush', activeforeground='red', bg='Salmon')
    toolmenu.config(activebackground='LavenderBlush', activeforeground='red', bg='Salmon')
    playmenu.config(activebackground='LavenderBlush', activeforeground='red', bg='Salmon')
    codemenu.config(activebackground='LavenderBlush', activeforeground='red', bg='Salmon')
    about.config(activebackground='LavenderBlush', activeforeground='red', bg='Salmon')
    zhuti.config(activebackground='LavenderBlush', activeforeground='red', bg='Salmon')
def zhuti04():
    s = ttk.Style()        #ok
    s.theme_use('clearlooks')
    textPad.config(bg='LemonChiffon')
    root.config(bg = 'LemonChiffon')#橙色
    family["menu"].config(activebackground = 'LemonChiffon', activeforeground = 'orange',bg='PapayaWhip')
    weight["menu"].config(activebackground = 'LemonChiffon', activeforeground = 'orange',bg='PaleGoldenrod')
    menubutton_show.menu.config(activebackground = 'LemonChiffon', activeforeground = 'OrangeRed',bg='DarkOrange')
    root.option_add("*TCombobox*Listbox*Background", 'orange')  # 设置combobox背景色
    filemenu.config(activebackground='LemonChiffon', activeforeground='OrangeRed', bg='DarkOrange')
    editmenu.config(activebackground='LemonChiffon', activeforeground='OrangeRed', bg='DarkOrange')
    toolmenu.config(activebackground='LemonChiffon', activeforeground='OrangeRed', bg='DarkOrange')
    playmenu.config(activebackground='LemonChiffon', activeforeground='OrangeRed', bg='DarkOrange')
    codemenu.config(activebackground='LemonChiffon', activeforeground='OrangeRed', bg='DarkOrange')
    about.config(activebackground='LemonChiffon', activeforeground='OrangeRed', bg='DarkOrange')
    zhuti.config(activebackground='LemonChiffon', activeforeground='OrangeRed', bg='DarkOrange')
def zhuti02():
    s = ttk.Style()     #ok
    s.theme_use('plastik')
    textPad.config(bg='lightyellow')
    root.config(bg = 'lightyellow') #黄色
    family["menu"].config(activebackground = 'lightyellow', activeforeground = 'DarkGoldenrod',bg='DarkKhaki')
    weight["menu"].config(activebackground = 'lightyellow', activeforeground = 'DarkGoldenrod',bg='Khaki')
    menubutton_show.menu.config(activebackground = 'lightyellow', activeforeground = 'DarkGoldenrod',bg='Goldenrod')
    root.option_add("*TCombobox*Listbox*Background", 'yellow')  # 设置combobox背景色
    filemenu.config(activebackground='lightyellow', activeforeground='DarkGoldenrod', bg='Goldenrod')
    editmenu.config(activebackground='lightyellow', activeforeground='DarkGoldenrod', bg='Goldenrod')
    toolmenu.config(activebackground='lightyellow', activeforeground='DarkGoldenrod', bg='Goldenrod')
    playmenu.config(activebackground='lightyellow', activeforeground='DarkGoldenrod', bg='Goldenrod')
    codemenu.config(activebackground='lightyellow', activeforeground='DarkGoldenrod', bg='Goldenrod')
    about.config(activebackground='lightyellow', activeforeground='DarkGoldenrod', bg='Goldenrod')
    zhuti.config(activebackground='lightyellow', activeforeground='DarkGoldenrod', bg='Goldenrod')
def zhuti09():
    s = ttk.Style()
    s.theme_use('scidmint')     #ok
    textPad.config(bg='MintCream')
    root.config(bg = 'MintCream')#绿色
    family["menu"].config(activebackground= 'MintCream',activeforeground='green',bg='Honeydew')
    weight["menu"].config(activebackground = 'MintCream', activeforeground = 'green',bg='Turquoise')
    menubutton_show.menu.config(activebackground = 'MintCream', activeforeground = 'green',bg='MediumSeaGreen')
    root.option_add("*TCombobox*Listbox*Background", 'lightgreen')  # 设置combobox背景色
    filemenu.config(activebackground='MintCream', activeforeground='green', bg='MediumSeaGreen')
    editmenu.config(activebackground='MintCream', activeforeground='green', bg='MediumSeaGreen')
    toolmenu.config(activebackground='MintCream', activeforeground='green', bg='MediumSeaGreen')
    playmenu.config(activebackground='MintCream', activeforeground='green', bg='MediumSeaGreen')
    codemenu.config(activebackground='MintCream', activeforeground='green', bg='MediumSeaGreen')
    about.config(activebackground='MintCream', activeforeground='green', bg='MediumSeaGreen')
    zhuti.config(activebackground='MintCream', activeforeground='green', bg='MediumSeaGreen')
def zhuti07():
    s = ttk.Style()   #ok
    s.theme_use('smog')
    textPad.config(bg='PowderBlue')
    root.config(bg = 'PowderBlue')# qing色
    family["menu"].config(activebackground = 'PowderBlue', activeforeground = 'blue',bg='lightsteelblue')
    weight["menu"].config(activebackground = 'PowderBlue', activeforeground = 'blue',bg='RoyalBlue')
    menubutton_show.menu.config(activebackground = 'PowderBlue', activeforeground = 'blue',bg='CornflowerBlue')
    root.option_add("*TCombobox*Listbox*Background", 'skyblue')  # 设置combobox背景色
    filemenu.config(activebackground='PowderBlue', activeforeground='blue', bg='CornflowerBlue')
    editmenu.config(activebackground='PowderBlue', activeforeground='blue', bg='CornflowerBlue')
    toolmenu.config(activebackground='PowderBlue', activeforeground='blue', bg='CornflowerBlue')
    playmenu.config(activebackground='PowderBlue', activeforeground='blue', bg='CornflowerBlue')
    codemenu.config(activebackground='PowderBlue', activeforeground='blue', bg='CornflowerBlue')
    about.config(activebackground='PowderBlue', activeforeground='blue', bg='CornflowerBlue')
    zhuti.config(activebackground='PowderBlue', activeforeground='blue', bg='CornflowerBlue')

def zhuti10():
    s = ttk.Style()    #ok
    s.theme_use('breeze')
    textPad.config(bg='LightCyan')
    root.config(bg = 'LightCyan')# 兰
    family["menu"].config( activebackground = 'LightBlue', activeforeground = 'DeepSkyBlue',bg = 'LightCyan')
    weight["menu"].config( activebackground = 'LightBlue', activeforeground = 'DeepSkyBlue',bg = 'Aqua')
    menubutton_show.menu.config(activebackground = 'PowderBlue', activeforeground = 'blue',bg='LightCyan')
    # root.option_add已经有默认combobox背景色-字体大小
    filemenu.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    editmenu.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    toolmenu.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    playmenu.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    codemenu.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    about.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    zhuti.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')

def zhuti05():
    s = ttk.Style()       #ok
    s.theme_use('keramik')
    textPad.config(bg='Lavender')
    root.config(bg = 'Lavender')#紫色
    family["menu"].config(activebackground = 'Lavender', activeforeground = 'Orchid',bg='Plum')
    weight["menu"].config(activebackground = 'Lavender', activeforeground = 'Orchid',bg='SlateBlue')
    menubutton_show.menu.config(activebackground = 'Thistle', activeforeground = 'Orchid',bg='Violet')
    root.option_add("*TCombobox*Listbox*Background", 'Orchid')  # 设置combobox背景色
    filemenu.config(activebackground='Lavender', activeforeground='Orchid', bg='Violet')
    editmenu.config(activebackground='Lavender', activeforeground='Orchid', bg='Violet')
    toolmenu.config(activebackground='Lavender', activeforeground='Orchid', bg='Violet')
    playmenu.config(activebackground='Lavender', activeforeground='Orchid', bg='Violet')
    codemenu.config(activebackground='Lavender', activeforeground='Orchid', bg='Violet')
    about.config(activebackground='Lavender', activeforeground='Orchid', bg='Violet')
    zhuti.config(activebackground='Lavender', activeforeground='Orchid', bg='Violet')

# https://wiki.tcl-lang.org/page/List+of+ttk+Themes 主题效果页面
# www.cnblogs.com/syxy/p/14724912.html
def zhuti08():
    s = ttk.Style()
    s.theme_use('xpnative')  #r岁月流金
    textPad.config(bg='OldLace')
    root.config(bg = 'OldLace')
    family["menu"].config(activebackground = 'Beige', activeforeground = 'DarkKhaki',bg='Cornsilk')
    weight["menu"].config(activebackground = 'Beige', activeforeground = 'DarkKhaki',bg='olive')
    menubutton_show.menu.config(activebackground = 'Beige', activeforeground = 'Gold',bg='FloralWhite')
    root.option_add("*TCombobox*Listbox*Background", 'NavajoWhite')  # 设置combobox背景色
    filemenu.config(activebackground='Beige', activeforeground='Gold', bg='FloralWhite')
    editmenu.config(activebackground='Beige', activeforeground='Gold', bg='FloralWhite')
    toolmenu.config(activebackground='Beige', activeforeground='Gold', bg='FloralWhite')
    playmenu.config(activebackground='Beige', activeforeground='Gold', bg='FloralWhite')
    codemenu.config(activebackground='Beige', activeforeground='Gold', bg='FloralWhite')
    about.config(activebackground='Beige', activeforeground='Gold', bg='FloralWhite')
    zhuti.config(activebackground='Beige', activeforeground='Gold', bg='FloralWhite')

def zhuti01():
    s = ttk.Style()
    s.theme_use('aquativo')  #坑灰未冷 ok
    textPad.config(bg='WhiteSmoke')
    root.config(bg = 'WhiteSmoke')
    family["menu"].config(activebackground = 'LightGrey', activeforeground = 'Azure')
    weight["menu"].config(activebackground = 'LightGrey', activeforeground = 'Azure')
    menubutton_show.menu.config(activebackground = 'LightGrey', activeforeground = 'Azure')
    root.option_add("*TCombobox*Listbox*Background", 'Azure')  # 设置combobox背景色
    filemenu.config(activebackground='LightGrey', activeforeground='Azure', bg='FloralWhite')
    editmenu.config(activebackground='LightGrey', activeforeground='Azure', bg='FloralWhite')
    toolmenu.config(activebackground='LightGrey', activeforeground='Azure', bg='FloralWhite')
    playmenu.config(activebackground='LightGrey', activeforeground='Azure', bg='FloralWhite')
    codemenu.config(activebackground='LightGrey', activeforeground='Azure', bg='FloralWhite')
    about.config(activebackground='LightGrey', activeforeground='Azure', bg='FloralWhite')
    zhuti.config(activebackground='LightGrey', activeforeground='Azure', bg='FloralWhite')
def zhuti11():
    s = ttk.Style()
    s.theme_use('equilux')    #黑客帝国
    textPad.config(bg='lightgray')
    root.config(bg = 'lightgray')
    family["menu"].config(activebackground= 'lightgray',activeforeground='ForestGreen',bg='DimGray')
    weight["menu"].config(activebackground = 'lightgray', activeforeground = 'ForestGreen',bg='DimGray')
    menubutton_show.menu.config(activebackground = 'lightgray', activeforeground = 'ForestGreen',bg='DimGray')
    root.option_add("*TCombobox*Listbox*Background", 'DimGray')  # 设置combobox背景色
    filemenu.config(activebackground='LightGrey', activeforeground='ForestGreen', bg='DimGray')
    editmenu.config(activebackground='LightGrey', activeforeground='ForestGreen', bg='DimGray')
    toolmenu.config(activebackground='LightGrey', activeforeground='ForestGreen', bg='DimGray')
    playmenu.config(activebackground='LightGrey', activeforeground='ForestGreen', bg='DimGray')
    codemenu.config(activebackground='LightGrey', activeforeground='ForestGreen', bg='DimGray')
    about.config(activebackground='LightGrey', activeforeground='ForestGreen', bg='DimGray')
    zhuti.config(activebackground='LightGrey', activeforeground='ForestGreen', bg='DimGray')
def zhuti03():
    s = ttk.Style()        #ok 冰雪奇缘
    s.theme_use('itft1')
    textPad.config(bg='AliceBlue')
    root.config(bg = 'AliceBlue')
    family["menu"].config(activebackground = 'AliceBlue', activeforeground = 'Purple',bg='SteelBlue')
    weight["menu"].config(activebackground = 'AliceBlue', activeforeground = 'Purple',bg='SteelBlue')
    menubutton_show.menu.config(activebackground = 'AliceBlue', activeforeground = 'Purple',bg='SteelBlue')
    root.option_add("*TCombobox*Listbox*Background", 'DodgerBlue')  # 设置combobox背景色
    filemenu.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    editmenu.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    toolmenu.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    playmenu.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    codemenu.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    about.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
    zhuti.config(activebackground='AliceBlue', activeforeground='Purple', bg='SteelBlue')
#-----
import turtle
def drawp():
    theScreen = turtle.TurtleScreen(canva)
    beni = turtle.RawTurtle(theScreen)

    def draw_r():
        beni.pencolor('red')  # 字母 R
        beni.penup()
        beni.setx(-290)
        beni.pendown()
        beni.left(90)
        beni.forward(200)
        beni.right(90)
        beni.forward(50)
        for i in range(36):
            beni.right(5)
            beni.forward(5)
        beni.forward(45)
        beni.right(90)
        beni.right(90)
        beni.forward(50)
        for i in range(10):
            beni.right(8)
            beni.forward(15)

    def draw_o():
        beni.up()  # 字母o
        beni.color("orange")
        beni.goto(-142, 20)
        beni.seth(-95)
        beni.down()
        beni.circle(40)

    def draw_g():
        beni.up()  # 字母 g
        beni.color("yellow")
        beni.goto(-70, 20)
        beni.seth(-95)
        beni.down()
        beni.circle(40)
        beni.up()
        beni.goto(10, 20)
        beni.down()
        beni.forward(100)
        for i in range(36):
            beni.right(5)
            beni.forward(5)

    def draw_a():
        beni.up()  # 字母a
        beni.color("dark turquoise")
        beni.goto(30, 20)
        beni.seth(-95)
        beni.down()
        beni.circle(40)
        beni.up()
        beni.goto(110, 20)
        beni.down()
        for i in range(10):
            beni.left(5)
            beni.forward(5)

    def draw_b():
        beni.up()  # 字母b
        beni.color("cyan")
        beni.setx(140)
        beni.left(135)
        beni.pendown()
        beni.forward(200)
        beni.goto(140, 20)
        for i in range(42):
            beni.right(11)
            beni.forward(8)

    def draw_e():
        beni.up()  # 字母e
        beni.color("blue")
        beni.goto(230, 20)
        beni.seth(0)
        beni.down()
        beni.fd(80)
        beni.seth(90)
        beni.circle(40, 320)

    def draw_t():
        beni.up()  # 字母t
        beni.goto(340, 20)
        beni.pendown()
        beni.color("purple")
        beni.forward(70)
        beni.up()
        beni.goto(320, 60)
        beni.down()
        beni.right(130)
        beni.forward(150)
        beni.left(120)
        beni.forward(50)
    beni.pensize(14)
    beni.hideturtle()
    beni.speed(40)
    theScreen.bgcolor("white")
    #theScreen.screensize(bg='yellow')
    draw_r()
    draw_o()
    draw_g()
    draw_a()
    draw_b()
    draw_g()
    draw_e()
    draw_t()

def mankan_wxnews():
    from threading import Thread, Lock
    lock = Lock()
    def kan_wxnews():
        import itchat
        #from itchat.content import *
        huifu=itchat.content.TEXT
        @itchat.msg_register(huifu)
        def text_reply(msg):
            friend = itchat.search_friends(userName=msg['FromUserName'])
            #replyContent = "收到您于%s发送的【%s】" % (time.strftime('%m-%d %H:%M', time.localtime()), msg['Type'])
            # if msg['Type'] == 'Text':
            #     if re.search(r"快乐", msg['Content']):
            #         replyContent += "【祝您天天开心和健康】"
            #         itchat.send('@img@%s' % 'moneyGod.jpg', toUserName=msg['FromUserName'])
            # itchat.send("好友:【%s（昵称：%s）】于：【%s】发来消息: 【%s】" % (
            #     friend['NickName'], friend['RemarkName'], time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()),
            #     msg['Text']),
            #             toUserName='filehelper')
           # itchat.send(replyContent, toUserName=msg['FromUserName'])
            #weixinhuifu=("于【%s】收到好友【%s（昵称：%s）】发来的【%s】: 【%s】" % (time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()), friend['NickName'], friend['RemarkName'], msg['Type'],msg['Content']))
            weixinhuifu = ("于【%s】收到【%s（昵称：%s）】的信息: 【%s】\n" % (time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()), friend['NickName'], friend['RemarkName'],msg['Content']))
            #weixinhuifu2=("于【%s】回复：%s\n" % (time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()), replyContent) + '\n')
            if msg['Type'] == 'Text':
                textPad5wxhuifu.insert(END,weixinhuifu)
        itchat.auto_login(hotReload=True)
        itchat.run()
        lock.release()
    taswx = Thread(target=kan_wxnews)
    taswx.start()

def mankan_wxfiles():
    from threading import Thread, Lock
    lock2 = Lock()
    #https://blog.csdn.net/weixin_42652708/article/details/81711318
    def kan_wxfiles():
        import itchat
        huifufile=itchat.content.ATTACHMENT
        @itchat.msg_register( huifufile)
        def text_reply(msg):
            friend = itchat.search_friends(userName=msg['FromUserName'])
            weixinhuifu3 = ("于【%s】收到【%s（昵称：%s）】的文件在rogabet-note\wechatfiles\n" % (time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()), friend['NickName'], friend['RemarkName']))
            # if msg['Type'] == 'Text' or msg['Type'] == 'Friends':
            #     msg_content = msg['Text']
            #if msg['Type'] == 'Recording' or msg['Type'] == 'Attachment' or msg['Type'] == 'Video' or msg['Type'] == 'Picture':
            if msg['Type'] == 'Attachment':
                msg_content = r"" + msg['FileName']
                #msg_content =msg['FileName']
                # 保存文件
                msg['Text'](os.getcwd()+'\\wechatfiles\\'+ msg['FileName'])
                textPad5wxhuifu.insert(END, weixinhuifu3)
        itchat.auto_login(hotReload=False)
        itchat.run()
        lock2.release()
    taswxfile = Thread(target=kan_wxfiles)
    taswxfile.start()
    start_directory = os.getcwd() + '\wechatfiles'
    os.system("explorer.exe %s" % start_directory)

    #https://blog.csdn.net/weixin_42652708/article/details/81711318


from tkinter.ttk import Button,OptionMenu,Frame,Label,Combobox,Checkbutton
#root = Tk()
root = ThemedTk(theme="xpnative", toplevel=True, themebg=True)
root.title('Rogabet Notepad ( 老罗笔记 TSP )')
root.geometry('1001x659+309+9')
canva = Canvas(root, width=1000, height=700)
def dragged_files(files):
    myopenitem=''.join((item.decode('GBK') for item in files))
    indexdrag = myopenitem.rfind('.')
    myopenitemrightextname=myopenitem[indexdrag:]
    print(myopenitemrightextname)


    global filename
    filename = myopenitem
    if filename == '':
        filename = None
    else:
        root.title('Rogabet notepad   ' + os.path.basename(filename))
        textPad.delete(1.0, END)
        f = open(filename, 'r')
        f2 = open(file=filename, mode='rb')
        import chardet
        bimabima = f2.read()
        resultbima = chardet.detect(bimabima)
        resultbima2 = str(resultbima)
        print(resultbima2)
        if '-8' in resultbima2:
            showinfo('notice', '此文件是UTF-8编码，即将使用转码打开.')
            print(resultbima2)
            oldfile2 = filename
            global newfile2
            # newfile2 = asksaveasfilename(initialfile='utf8-ansi编码.txt', defaultextension='.txt')
            fp_ansi = open('utf8_ansi.txt', 'wb')  # 转码后输出的文件
            fp_utf8 = open(oldfile2, 'rb')  # 待转码的文件
            data = ""
            data = fp_utf8.read()
            data = data.decode('utf-8')  # 以二进制格式读入的数据需要先转码（转为内部码）才可以继续转换
            data = data.encode('mbcs', errors='ignore')  # 关键，将内部码再次编码
            fp_ansi.write(data)  # 写入文件
            fp_ansi.close()
            fp_utf8.close()
            f3 = open('utf8_ansi.txt', 'r')
            textPad.insert(1.0, f3.read())
        if '-16' in resultbima2:
            showinfo('notice', '此文件是UTF-16-unicode编码，即将使用转码打开.')
            print(resultbima2)
            oldfile3 = filename
            global newfile3
            # newfile3 = asksaveasfilename(initialfile='unicode-ansi编码.txt', defaultextension='.txt')
            fp_ansi = open('unicode_ansi.txt', 'wb')  # 转码后输出的文件
            fp_utf16 = open(oldfile3, 'rb')  # 待转码的文件
            data = ""
            data = fp_utf16.read()
            data = data.decode('utf-16')  # 以二进制格式读入的数据需要先转码（转为内部码）才可以继续转换
            data = data.encode('mbcs', errors='ignore')  # 关键，将内部码再次编码
            fp_ansi.write(data)  # 写入文件
            fp_ansi.close()
            fp_utf16.close()
            f3 = open('unicode_ansi.txt', 'r')
            textPad.insert(1.0, f3.read())
        if myopenitemrightextname == '.pdf':
            addpdffile = myopenitem
            with openpd(addpdffile) as pdf:
                numpages = len(pdf.pages)
                for i in range(0, numpages):
                    read_page = pdf.pages[i]
                    # print(read_page.extract_text())
                    textPad.insert('end', read_page.extract_text())
                    textPad.insert('end', '\n-----\n')
        if myopenitemrightextname == '.docx':
            adddocxfile = myopenitem
            wdoc = docx.Document(adddocxfile)
            docxnumparas = len(wdoc.paragraphs)
            for i in range(0, docxnumparas):
                readdocx_para = wdoc.paragraphs[i].text
                textPad.insert('end', readdocx_para)
                textPad.insert('end', '\n')
        if myopenitemrightextname == '.note':
            loadnotefile = myopenitem
            root.title('Rogabet notepad  ' + os.path.basename(loadnotefile))
            textPad.delete(1.0, END)

            with gzip.open(loadnotefile, 'rb') as input:
                with io.TextIOWrapper(input, encoding='utf-8') as dec:
                    content2 = dec.read()
                    textPad.insert(1.0, content2)
        else:
            textPad.insert(1.0, f.read())
            f.close()
windnd.hook_dropfiles(root,func=dragged_files)
#canva.pack()启动画面
#drawp()
#canva.pack_forget()
toolbar=ttk.Frame(root,relief=RAISED,borderwidth=1)
toolbar.pack(side=TOP,fill=X,padx=2,pady=1)
familyVar=StringVar()
familyFamily=("Arial","Times","Courier","宋体","楷体","隶书","仿宋","黑体","华文行楷")
familyVar.set(familyFamily[3])
family=ttk.OptionMenu(toolbar,familyVar,*familyFamily,command=familyChanged)
family.pack(side=LEFT,pady=2)

weightVar=StringVar()
weightFamily=("normal","bold","normal")
weightVar.set(weightFamily[0])
weight=ttk.OptionMenu(toolbar,weightVar,*weightFamily,command=weightChanged)
weight.pack(side=LEFT,pady=2)

sizeVar=IntVar()
size= ttk.Combobox(toolbar,textvariable=sizeVar,width=3)
sizeFamily=[x for x in range(10,73)]
size["values"]=sizeFamily
zitidx=size.current(6)

size.bind("<<ComboboxSelected>>",sizeSelected)
size.pack(side=LEFT)

#wechat send msg start
sendwxbutton = ttk.Button(toolbar, command=send_wxnews, text='发微信',width=6)
sendwxbutton.pack(side=LEFT,pady=2)
nickwxvar = StringVar()
gentry = ttk.Entry(toolbar, textvariable=nickwxvar,width=16)
gentry.pack(side=LEFT,pady=2)

CheckVar1 = IntVar()
C1 = ttk.Checkbutton(toolbar, text = "发微信文件", variable = CheckVar1,  onvalue = 1, offvalue = 0,  width = 10,command=send_wxfile)
C1.pack(side=LEFT,pady=2)
sendwxhuifubutton = ttk.Button(toolbar, command=mankan_wxnews, text='看WX回复',width=9)
sendwxhuifubutton.pack(side=LEFT,pady=2)
sendwxhuifufilebutton = ttk.Button(toolbar, command=mankan_wxfiles, text='收WX文件',width=9)
sendwxhuifufilebutton.pack(side=LEFT,pady=2)
# A Z search start
#https://my.oschina.net/u/2245781/blog/661533
glabel = ttk.Label(toolbar, text='A*Z:')
glabel.pack(side=LEFT,pady=2)
entryvar = StringVar()
gentry = ttk.Entry(toolbar, textvariable=entryvar,width=15)
gentry.pack(side=LEFT,pady=2)
gentry.insert(0,'关键词')
entryvar2 = StringVar()
gentry = ttk.Entry(toolbar, textvariable=entryvar2,width=14)
gentry.pack(side=LEFT,pady=2)
gentry.insert(0,'')
gbutton = ttk.Button(toolbar, command=superfind, text=' 查找 ',width=5)
gbutton.pack(side=LEFT,pady=2)
gbutton2 = ttk.Button(toolbar, command=guolv, text='删空行刷新',width=10)
gbutton2.pack(side=LEFT,pady=2)


#for sendmail
toolbar2 = ttk.Frame(root, relief=RAISED, borderwidth=1)
toolbar2.pack(side=TOP, fill=X, padx=2, pady=1)
glabel2 = ttk.Label(toolbar2, text='发件址:')
glabel2.pack(side=LEFT, pady=2)
frommvar3 = StringVar()
gentry = ttk.Entry(toolbar2, textvariable=frommvar3, width=21)
gentry.pack(side=LEFT, pady=2)
glabel3 = ttk.Label(toolbar2, text='密码:')
glabel3.pack(side=LEFT, pady=2)
mailpassvar = StringVar()
gentry = ttk.Entry(toolbar2, textvariable=mailpassvar, width=10)
gentry.pack(side=LEFT, pady=2)
glabel4 = ttk.Label(toolbar2, text='smtp服务')
glabel4.pack(side=LEFT, pady=2)
mailsmtpvar = StringVar()
gentry = ttk.Entry(toolbar2, textvariable=mailsmtpvar, width=14)
gentry.pack(side=LEFT, pady=2)
gentry.insert(0,'smtp.??.com')
glabel5 = ttk.Label(toolbar2, text='标题:')
glabel5.pack(side=LEFT, pady=2)
mailtitlevar = StringVar()
gentry = ttk.Entry(toolbar2, textvariable=mailtitlevar, width=14)
gentry.pack(side=LEFT, pady=2)
glabel6 = ttk.Label(toolbar2, text='收件址:')
glabel6.pack(side=LEFT, pady=2)
getmvar3 = StringVar()
gentry = ttk.Entry(toolbar2, textvariable=getmvar3, width=21)
gentry.pack(side=LEFT, pady=2)
gbutton3 = ttk.Button(toolbar2, command=send_mail2, text='发邮件',width=6)
gbutton3.pack(side=LEFT, pady=2)
CheckVarEt3att = IntVar()
C4 = ttk.Checkbutton(toolbar2, text = "邮件附件", variable = CheckVarEt3att,  onvalue = 1, offvalue = 0,  width = 8)
C4.pack(side=LEFT,pady=2)

#发件历史库-----
toolbar4 = ttk.Frame(root, relief=RAISED, borderwidth=1)
toolbar4.pack(side=TOP, fill=X, padx=2, pady=1)
gbutton7 = ttk.Button(toolbar4, command=createmaillog, text='建发件库',width=8)
gbutton7.pack(side=LEFT, pady=2)
gbutton8 = ttk.Button(toolbar4, command=searchmaillog, text='发件历史区查发件',width=15)
gbutton8.pack(side=LEFT, pady=2)
#下网页
glabel6 = ttk.Label(toolbar4, text='网页\-URL:')
glabel6.pack(side=LEFT, pady=2)
fromurl1 = StringVar()
gentry = ttk.Entry(toolbar4, textvariable=fromurl1, width=66)
gentry.pack(side=LEFT, pady=2)
gentry.insert(0,'https://baike.baidu.com/item/')
gbutton5webgo = ttk.Button(toolbar4, command=webgogo, text='浏览',width=6)
gbutton5webgo.pack(side=LEFT, pady=2)
gbutton5longpic = ttk.Button(toolbar4, command=longpic, text='网页长图',width=8)
gbutton5longpic.pack(side=LEFT, pady=2)
gbutton5 = ttk.Button(toolbar4, command=downzip, text='下文件',width=7)
gbutton5.pack(side=LEFT, pady=2)
gbutton4 = ttk.Button(toolbar4, command=downhtml, text='下网页',width=7)
gbutton4.pack(side=LEFT, pady=2)

gbutton4 = ttk.Button(toolbar4, command=liteocr, text='识图',width=7)

gbutton4.pack(side=LEFT,pady=2)
#高级查询发件箱
toolbar3 = ttk.Frame(root, relief=RAISED, borderwidth=1)
toolbar3.pack(side=TOP, fill=X, padx=2, pady=1)
glabel7 = ttk.Label(toolbar3, text='据收件址查询:')
glabel7.pack(side=LEFT, pady=2)
getmvar5 = StringVar()
gentry = ttk.Entry(toolbar3, textvariable=getmvar5, width=21)
gentry.pack(side=LEFT, pady=2)
gbutton9 = ttk.Button(toolbar3, command=searchmailtolog, text='收件地址查发件',width=14)
gbutton9.pack(side=LEFT, pady=2)
glabel8 = ttk.Label(toolbar3, text='据邮件标题查询:')
glabel8.pack(side=LEFT, pady=2)
getmvar6bt = StringVar()
gentry = ttk.Entry(toolbar3, textvariable=getmvar6bt, width=22)
gentry.pack(side=LEFT, pady=2)
gbutton10 = ttk.Button(toolbar3, command=searchmailttlog, text='邮件标题查发件',width=14)
gbutton10.pack(side=LEFT, pady=2)


CheckVarEt = IntVar()
C2 = ttk.Checkbutton(toolbar3, text = "译句回车", variable = CheckVarEt,  onvalue = 1, offvalue = 0,  width = 8)
C2.pack(side=LEFT,pady=2)
CheckVarEt2 = IntVar()
C3 = ttk.Checkbutton(toolbar3, text = "用翻译区", variable = CheckVarEt2,  onvalue = 1, offvalue = 0,  width = 8)
C3.pack(side=LEFT,pady=2)

#showhide mailbar
# gbutton11 = ttk.Button(toolbar, text='显',width=4,command=toolbar4.pack)
# gbutton11.pack(side=LEFT, pady=2)
# gbutton12 = ttk.Button(toolbar2, text=' 示 ',width=4,command=toolbar3.pack)
# gbutton12.pack(side=LEFT, pady=2)
# gbutton12 = ttk.Button(toolbar4, text=' 隐 ',width=4,command=toolbar4.pack_forget)
# gbutton12.pack(side=LEFT, pady=2)
# gbutton12 = ttk.Button(toolbar3, text='藏',width=4,command=toolbar3.pack_forget)
# gbutton12.pack(side=LEFT, pady=2)

#toolbar5
toolbar5 = ttk.Frame(root, relief=RAISED, borderwidth=1)
toolbar5.pack(side=BOTTOM, fill=X, padx=2, pady=1)
pb = ttk.Progressbar(toolbar5, length = 850, value = 0, mode = "determinate")
pb.pack()
pb['maximum']=100
pb['value'] =0
menubar = Menu(root)
root.config(menu =menubar)
filemenu = Menu(menubar)
filemenu.add_command(label='0 新建',  command=new,underline=0)
filemenu.add_command(label='1 打开txt',  command=myopen,underline=0)
filemenu.add_command(label='2 保存txt', command=save,underline=0)
filemenu.add_command(label='3 打开note',  command=myopen2,underline=0)
filemenu.add_command(label='4 保存note', command=save2,underline=0)
filemenu.add_command(label='5 另存为...',  command=saveas,underline=0)
filemenu.add_command(label ='6 编码记事本', command=bimanote,underline=0)
filemenu.add_command(label = '7 生成二维码', command=qrout,underline=0)
filemenu.add_command(label = '8 导出xlsx表格', command=txt2xlsxrd,underline=0)
filemenu.add_command(label = '9 暂存到云FTP', command=yun_note,underline=0)
filemenu.add_command(label='Y 打印机设置',  command=printerset,underline=0)
filemenu.add_command(label='L 开始打印',  command=printer,underline=0)
filemenu.add_command(label='T 退出',  command=willquit,underline=0)
menubar.add_cascade(label='F 文件 ', menu=filemenu,underline=0)

editmenu = Menu(menubar)
editmenu.add_command(label='撤销', accelerator='Ctrl+Z', command=undo)
editmenu.add_command(label='重做', accelerator='Ctrl+Y', command=redo)
editmenu.add_command(label='剪切', accelerator='Ctrl+X', command=cut)
editmenu.add_command(label='复制', accelerator='Ctrl+C', command=copy)
editmenu.add_command(label='粘贴', accelerator='Ctrl+V', command=paste)
editmenu.add_command(label='全选', accelerator='Ctrl+A', command=select_all)

editmenu.add_separator()
editmenu.add_command(label='0 查找替换+ 批量表求和 +抽表指定行', command=find,underline=0)

editmenu.add_command(label='1 插入日期时间', command=addtime,underline=0)
editmenu.add_command(label='2 插入PC硬件信息', command=addpcinfo,underline=0)
editmenu.add_command(label='3 插入CSV里的文字', command=addcsv,underline=0)
editmenu.add_command(label='4 插入非扫描PDF的文字', command=addpdf,underline=0)
editmenu.add_command(label='5 插入XLSX(excel表)里文字', command=addxlsx,underline=0)
editmenu.add_command(label ='6 插入PPTX演示文稿里文字', command=newpptx,underline=0)
editmenu.add_command(label='7 插入docx(word档)里的文字', command=adddocx,underline=0)
editmenu.add_command(label = '8 开启每10分钟保存当前TXT', command=savePerFive,underline=0)
editmenu.add_command(label = '9 关闭每10分钟保存当前TXT', command=savePer10ff,underline=0)
editmenu.add_command(label = '首列减去次列字段(空格分开为列)', command=aaa_bbb,underline=0)
editmenu.add_command(label = 'decode-unicode-escape解码', command=uuu2chn,underline=0)
menubar.add_cascade(label='E 编辑 ', menu=editmenu,underline=0)

toolmenu = Menu(menubar)
toolmenu.add_command(label = '0 朗读全文', command=spk,underline=0)
toolmenu.add_command(label = '1 朗读选句', command=spksel,underline=0)
toolmenu.add_command(label = '2 中译英 ', command=toEn,underline=0)
toolmenu.add_command(label = '3 英译中 ', command=toCn,underline=0)
toolmenu.add_command(label = '4 简->繁 ', command=toCht,underline=0)
toolmenu.add_command(label = '5 繁->简 ', command=fromCht,underline=0)
toolmenu.add_command(label = '6 中译日 ', command=toJp,underline=0)
toolmenu.add_command(label = '7 日译中 ', command=fromJp,underline=0)
#toolmenu.add_command(label = '8 词霸翻译', command=ciba,underline=0)
#toolmenu.add_command(label = '9 有道翻译', command=youdao,underline=0)
menubar.add_cascade(label = 'D 翻译朗读 ',menu = toolmenu,underline=0)
root.config(menu = menubar)

playmenu = Menu(menubar)
playmenu.add_command(label ='0 悬浮工具条-截图', command=flymenu,underline=0)
playmenu.add_command(label='1 PDF的文件转图片',  command=pdftoimgha,underline=0)
playmenu.add_command(label='2 提取图中文字插入',  command=pngzwzyn,underline=0)
#playmenu.add_command(label='3 在线提取图中文字',  command=tpzwz,underline=0)
playmenu.add_command(label='3 高级长图截取',  command=longpic2,underline=0)
#playmenu.add_command(label='4 在线二维码的产生',  command=qrcodes,underline=0)
playmenu.add_command(label='4 MP3播放器',  command=play,underline=0)
playmenu.add_command(label='5 在线文档格式转换',  command=wdzh,underline=0)
playmenu.add_command(label='6 批量提取图中文字',  command=manypic2txt,underline=0)
#playmenu.add_command(label='6 在线语音转文字',  command=yyzwz2,underline=0)
playmenu.add_command(label='7 有道云笔记', command=ynote,underline=0)
playmenu.add_command(label='8 网页版微信',  command=play2,underline=0)

playmenu.add_command(label = 'J 框选截图', command=jietula,underline=0)
playmenu.add_command(label='B 在线计算',  command=wkweb,underline=0)
menubar.add_cascade(label='L 办公学习', menu=playmenu,underline=0)

codemenu = Menu(menubar)
codemenu.add_command(label = '0 加密当前文档 ', command=Unicode2HexStr,underline=0)
codemenu.add_command(label = '1 修改解密账户', command=haha,underline=0)
codemenu.add_command(label = '2 账号解密文档', command=HexStr2Unicode,underline=0)
#codemenu.add_command(label = '3 人脸解密文档', command=renlianjiemi,underline=0)
codemenu.add_command(label='3 整理邮件收件',  command=open_mail_inbox,underline=0)
codemenu.add_command(label='4 收取最新邮件',  command=getmail,underline=0)

codemenu.add_command(label='5 AES加密文件',  command=aesone,underline=0)
codemenu.add_command(label='6 AES解密文件',  command=unaesone,underline=0)
codemenu.add_command(label = '7 保存密档行程计划', command=jiamidabao,underline=0)
codemenu.add_command(label = '8 导入查看行程计划', command=jiemijiebao,underline=0)
codemenu.add_command(label='9 邮件发密档行程计划',  command=sdmail,underline=0)

menubar.add_cascade(label='M 加密和邮件', menu=codemenu,underline=0)

about = Menu(menubar)
systoolmenu=Menu(about,tearoff=False)
systoolmenu.add_command(label='P 媒体播放',  command=play3,underline=0)
systoolmenu.add_command(label = 'S 计算器', command=jisuanqi,underline=0)
systoolmenu.add_command(label = 'Y 画图', command=paint,underline=0)
systoolmenu.add_command(label = 'J 系统截图', command=xtjt,underline=0)
about.add_command(label='0 PDF-PPT-表等批量工具',  command=pdfbox,underline=0)
about.add_command(label ='1 旧的xls表格处理', command=oldxlsopen,underline=0)
about.add_command(label ='2 播放旧的PPT演示', command=oldppt,underline=0)
about.add_command(label ='3 播放新PPTX演示', command=newpptxplay,underline=0)
about.add_command(label ='4 打开PDF文件', command=rddpdf,underline=0)
about.add_cascade(label='5 系统工具',  menu=systoolmenu,underline=0)
about.add_command(label = '6 使用说明', command=fanyisuoming,underline=0)
about.add_command(label = '7 天数计算', command=tianshu,underline=0)
about.add_command(label = '8 自动任务', command=tinytask,underline=0)
about.add_command(label='9 ~思维导图',  command=fly,underline=0)
menubar.add_cascade(label='Q 关于-其他', menu=about,underline=0)

#旧的text and scrollbar
# textPad = Text(root, width=90, height=90, selectforeground="black", undo=True, font=90)
# textPad.pack(expand=YES, fill=BOTH)
# scroll = Scrollbar(textPad,width=6)
# textPad.config(yscrollcommand=scroll.set)
# scroll.config(command = textPad.yview)
# scroll.pack(side=RIGHT,fill=BOTH)
#new style scroll and text
class AutoHideScrollbar(ttk.Scrollbar):
    def set(self,upper,lower):
        if float(upper) <= 0.0 and float(lower) >= 1.0:
            self.pack_forget()
        else:
            self.pack(side="right", fill="y")
        ttk.Scrollbar.set(self,upper,lower)

frame = ttk.Frame(root) # 用于放置scrollbar组件
frame.pack(side="right", fill="y")

vscrollbar = AutoHideScrollbar(frame)
vscrollbar.pack(side=RIGHT, fill="y")

notebook=ttk.Notebook(root)
frame1note=ttk.Frame()
frame3fanyi=ttk.Frame()
frame2mail=ttk.Frame()
frame4detailuse=ttk.Frame()
frame5shujutu=ttk.Frame()
frame6rilichaxun=ttk.Frame()
frame7gupiaork=ttk.Frame()
frame8myfav=ttk.Frame()
frame9wxhuifu=ttk.Frame()
frame1duibi=Frame()
frame2replaceword=Frame()

#frame10myweb=ttk.Frame()
notebook.add(frame1note,text='文本编辑区')
notebook.add(frame3fanyi,text='文本翻译区')
notebook.add(frame9wxhuifu,text='微信对话区')
notebook.add(frame8myfav,text='网址收藏管理')
notebook.add(frame4detailuse,text='使用手册')
notebook.add(frame6rilichaxun,text='日历计划')
notebook.add(frame2mail,text='发件历史区')
notebook.add(frame5shujutu,text='数据图表')
notebook.add(frame7gupiaork,text='计算器和股票k')
notebook.add(frame1duibi,text='对比表格vlookup')
notebook.add(frame2replaceword,text='替换多表文件中单元格词汇')
#notebook.add(frame10myweb,text='百度')
notebook.pack(fill=BOTH,expand=TRUE)
#替换多表文件中单元格数据
def selectdir():
    global workwhere
    workwhere = askdirectory() + '/'  # 获得选择好的文件夹
    print(workwhere)
    e1workwhere.insert(0, workwhere)
def replacedanyuanword():
    import xlwings as xw
    file_path =workwhere
    file_list = os.listdir(file_path)
    app = xw.App(visible=False, add_book=False)
    for i in file_list:
        if i.startswith('~$'):
            continue
        file_paths = os.path.join(file_path, i)
        workbook = app.books.open(file_paths)
        for j in workbook.sheets:
            value = j['A2'].expand('table').value
            for index, val in enumerate(value):
                if val[0] == e2oldword.get():
                    val[0] =e3newword.get()
                    value[index] = val
            j['A2'].expand('table').value = value
        workbook.save()
        workbook.close()
    app.quit()
    showinfo('提示', '文件处理完毕')

L1workwhere = Label( frame2replaceword,text="选择批量处理多表所在位置 (如程序目录下worktemp文件夹)：")
L1workwhere.pack()
getworkwherebutton = Button(frame2replaceword,command=selectdir, text='选多个表文件所在文件夹',width=70)
getworkwherebutton.pack()
var1workwhere = StringVar()
e1workwhere = Entry(frame2replaceword,show=None,textvariable=var1workwhere,width=70)
e1workwhere.pack()
L2oldword = Label( frame2replaceword,text="要被替换的旧单元格关键词：")
L2oldword.pack()

var2oldword = StringVar()
e2oldword = Entry(frame2replaceword,show=None,textvariable=var2oldword,width=50)
e2oldword.pack()
L3new_word = Label( frame2replaceword,text="输入要替换的新关键词：")
L3new_word.pack()
var3newword = StringVar()
e3newword = Entry(frame2replaceword,show=None,textvariable=var3newword,width=50)
e3newword.pack()
replacewordbtn = Button(frame2replaceword,command=replacedanyuanword, text='开始执行批量替换单元格关键词',width=50)
replacewordbtn.pack()
L3jieshao = Label( frame2replaceword,text="用途: 比如你有多个电子表格 excel文件在某个目录，里边都有 单元格词汇是 行李箱，你可以批量替换为 手提包")
L3jieshao.pack()
#对比表格
def selectfile1():
    duibi01xlsxPath = askopenfilename(title='选一个excel-xlsx文件，作为比较基准 (样本 表aa)', defaultextension='.xlsx')
    e1filename1.delete(0,'end')
    e1filename1.insert(0, duibi01xlsxPath)
def selectfile2():
    duibi02xlsxPath = askopenfilename(title='选一个excel-xlsx文件，作为对比文件(样本 表bb)', defaultextension='.xlsx')
    e4filename2.delete(0,'end')
    e4filename2.insert(0, duibi02xlsxPath)

def data_match():
    import pandas as pd
    path = os.getcwd()
    os.chdir(path)
    table_a_path = e1filename1.get()
    sheet_a_name = e2sheetname1.get()
    A_id = e3baselie1.get()
    table_a = pd.read_excel(table_a_path,sheet_name = sheet_a_name,converters={A_id:str}).dropna(axis=1,how='all')
    table_b_path = e4filename2.get()
    sheet_b_name = e5sheetnameb1.get()
    B_id = e6base2lie.get()
    target_col = e7duibi.get()
    table_b = pd.read_excel(table_b_path, sheet_name=sheet_b_name, converters={B_id: str}).dropna(axis=1, how='all')
    table_b_2 = table_b.groupby(B_id)[target_col].sum().reset_index()
    table_c = table_a.merge(right=table_b_2,how='left',left_on=A_id,right_on=B_id)
    table_c.to_excel('result.xlsx',index=False)
    os.startfile('result.xlsx')
L1 = Label( frame1duibi,text="输入或选择表A的文件名：")
L1.pack()
getfile1button = Button(frame1duibi,command=selectfile1, text='选择基准表文件',width=70)
getfile1button.pack()

var1filename1 = StringVar()
e1filename1 = Entry(frame1duibi,show=None,textvariable=var1filename1,width=70)
e1filename1.pack()
L2 = Label(frame1duibi, text="请输入表A中sheet子表名称( 如 Sheet1 )：")
L2.pack()
var2sheetname1 = StringVar()
e2sheetname1 = Entry(frame1duibi,show=None,textvariable=var2sheetname1,width=50)
e2sheetname1.pack()
e2sheetname1.insert(0, 'Sheet1')
L3 = Label(frame1duibi, text="请输入表A中的ID列名(如 用户 两表都有的列名)：")
L3.pack()
var3baselie1 = StringVar()
e3baselie1 = Entry(frame1duibi,show=None,textvariable=var3baselie1,width=50)
e3baselie1.pack()
e3baselie1.insert(0, '用户')
L4line = Label(frame1duibi, text="----------------------")
L4line.pack()
L4 = Label(frame1duibi, text="输入或选择表B的文件名：")
L4.pack()

getfile2button = Button(frame1duibi,command=selectfile2, text='选择对比表文件',width=70)
getfile2button.pack()
var4filename2 = StringVar()
e4filename2 = Entry(frame1duibi,show=None,textvariable=var4filename2,width=70)
e4filename2.pack()
L5 = Label(frame1duibi, text="请输入表B中sheet子表名称( 如 Sheet1 )：")
L5.pack()
var5sheetnameb1 = StringVar()
e5sheetnameb1 = Entry(frame1duibi,show=None,textvariable=var5sheetnameb1,width=50)
e5sheetnameb1.pack()
e5sheetnameb1.insert(0, 'Sheet1')
L6 = Label(frame1duibi, text="请输入表B中的ID列名(如 用户 两表都有的列名)：")
L6.pack()
var6base2lie = StringVar()
e6base2lie = Entry(frame1duibi,show=None,textvariable=var6base2lie,width=50)
e6base2lie.pack()
e6base2lie.insert(0, '用户')
L7 = Label(frame1duibi, text="输入比较差异的表B中的列名(如 序列号)：")
L7.pack()
var7duibilie = StringVar()
e7duibi = Entry(frame1duibi,show=None,textvariable=var7duibilie,width=50)
e7duibi.pack()
e7duibi.insert(0, '序列号')

bduibi = ttk.Button(frame1duibi,text='对比 -> result.xlsx',width=50,command=data_match)
bduibi.pack()
#文本处理
textPad = Text(frame1note, wrap=WORD, yscrollcommand=vscrollbar.set,undo=True,font=90,bg='lightyellow')
textPad.pack(fill=BOTH, expand=True)
vscrollbar.config(command=textPad.yview)
textPad2mail_log = Text(frame2mail, wrap=WORD, yscrollcommand=vscrollbar.set,undo=True,font=90,bg='lightyellow')
textPad2mail_log.pack(fill=BOTH, expand=True)
textPad3fanyi = Text(frame3fanyi, wrap=WORD, yscrollcommand=vscrollbar.set,undo=True,font=90,bg='lightyellow')
textPad3fanyi.pack(fill=BOTH, expand=True)
textPad5wxhuifu = Text(frame9wxhuifu, wrap=WORD, yscrollcommand=vscrollbar.set,undo=True,font=90,bg='lightyellow')
textPad5wxhuifu.pack(fill=BOTH, expand=True)
textPad4use_manual = Text(frame4detailuse, wrap=WORD, yscrollcommand=vscrollbar.set,undo=True,font=90,bg='lightyellow')
textPad4use_manual.pack(fill=BOTH, expand=True)
rightframe=ttk.LabelFrame(frame6rilichaxun,text='任务计划',width=620,height=400)
rightframe.pack(side=RIGHT)

#  #浏览器内置
# from cefpython3 import cefpython as cef
# #cefpython3 add it in pycharm
# from tkinter import *
# from threading import Thread
# import sys
# def embed_browser_thread(frame, _rect):
#     sys.excepthook = cef.ExceptHook
#     window_info = cef.WindowInfo(frame.winfo_id())
#     window_info.SetAsChild(frame.winfo_id(), _rect)
#     cef.Initialize()
#     #baseaddr=os.getcwd()+r'\map.html'
#     #gogourl=r'file://'+baseaddr
#     gogourl='https://www.baidu.com/'
#     cef.CreateBrowserSync(window_info, url=gogourl)
#     cef.MessageLoop()
# mywebframe=ttk.LabelFrame(frame10myweb,text='百度',width=1440,height=900)
# mywebframe.pack(side=LEFT)
# rect = [0, 0, 1440, 900]
# threadmap = Thread(target=embed_browser_thread, args=(mywebframe, rect))
# threadmap.start()

#网址收藏管理---
from pypinyin import Style
import pypinyin
import json
import csv
FONT_1 = ('微软雅黑', 14, 'normal')
FONT_2 = ('Arial', 12, 'normal')

class PopupDialog(Toplevel):
    def __init__(self, parent):
        super().__init__()
        sw = self.winfo_screenwidth()  # 得到屏幕宽度
        sh = self.winfo_screenheight() - 125  # 得到屏幕高度
        ww = 400
        wh = 125
        x = (sw - ww) / 2
        y = (sh - wh) / 2
        self.geometry("%dx%d+%d+%d" % (ww, wh, x, y))  # 居中显示
        self.resizable(0, 0)  # 禁止缩放窗口
        self.title('添加路径')
        self.transient(parent)
        self.parent = parent  # 显示式地保留父窗口
        frame = ttk.Frame(self)
        frame.grid()
        self.grab_set()  # 使焦点聚焦到新窗口，根窗口失效
        self.protocol("WM_DELETE_WINDOW", self.cancel)

        ttk.Label(frame, text='名称：').grid(row=0, column=0, sticky=E, pady=8)
        self.name = StringVar()
        self.entry1 = ttk.Entry(frame, textvariable=self.name, width=50)
        self.entry1.grid(row=0, column=1, columnspan=4, sticky=W, pady=8)
        # 第二行
        ttk.Label(frame, text='路径：').grid(row=1, column=0, sticky=E)
        self.url = StringVar()
        ttk.Entry(frame, textvariable=self.url, width=50).grid(row=1,
                                                              column=1, columnspan=4, sticky=W)
        # 第三行
        ttk.Button(frame, text="确定", command=self.ok).grid(row=2, column=2, sticky=S, pady=10)
        ttk.Button(frame, text="取消", command=self.cancel).grid(row=2, column=3, sticky=S, pady=10)
        self.entry1.focus_set()
        # 事件处理
        self.bind("<Return>", self.ok)
        self.bind("<Escape>", self.cancel)

    def ok(self, event=None):
        urlname = self.name.get().strip()
        url = self.url.get().strip()
        if urlname == '' or url == '':
            showwarning('警告', '输入不能为空！')
            return
        # if self.parent.urllist.has_key(self.parent.name): # has_key() 方法
        if urlname in self.parent.urllist:
            if askyesno('提示', '名称 ‘%s’ 已存在，将会覆盖，是否继续？' % urlname):
                pass
            else:
                return
        self.parent.urllist[urlname] = url
        # 重新加载列表
        self.parent.listbox.delete(0, END)
        for item in self.parent.urllist:
            self.parent.listbox.insert(END, item)
        self.destroy()  # 銷燬窗口
    def cancel(self, event=None):
        self.destroy()

# 主窗体
class MyFavApp(ttk.Frame):
    def __init__(self, master=None):
        super().__init__()
        #self.master = master
        self.pack()

        # 获取列表
        self.urllist = self.readUrlList()
        if self.urllist:
            self.createWidgets()
           # self.mainloop()
        else:
            showinfo('Error', '读取地址列表失败！请查看openlist.json文件是否存在并且格式正确。')

    def readUrlList(self):
        try:
            with open('openlist.json', 'r', encoding='utf-8') as f_obj:
                urllist = json.load(f_obj)
                # for name,url in urllist.items():
                #     print(name,url)
            return urllist
        except FileNotFoundError:
            return None

    def savaUrllist(self):
        with open('openlist.json', 'w', encoding='utf-8') as f:
            json.dump(self.urllist, f, ensure_ascii=False, indent=2)

        print('文件保存成功。')


    def createWidgets(self):
        # 创建搜索框
        self.frame1 = ttk.Frame(frame8myfav)
        self.frame1.pack(side=TOP, fill=X)
        self.lb = Label(self.frame1, text='搜索：', font=FONT_2)
        self.lb.pack(side=LEFT)
        self.keywdbox = Entry(self.frame1, font=FONT_2)
        self.keywdbox.pack(side=LEFT, fill=X, expand=YES)

        self.keywdbox.focus_set()  # 打开应用时光标定位到搜索框

        # 创建列表框
        self.frame2 = ttk.Frame(frame8myfav)
        self.frame2.pack(side=TOP, fill=X, pady=5)
        self.scrolly = Scrollbar(self.frame2, )
        self.scrolly.pack(side=RIGHT, fill=Y)
        self.listbox = Listbox(self.frame2, width=60, height=15, font=FONT_1,
                               yscrollcommand=self.scrolly.set)  # 列表框

        self.listbox.pack(fill=BOTH, expand=YES)
        self.scrolly.config(command=self.listbox.yview)

        # 创建添加、删除按钮
        self.frame3 = ttk.Frame(frame8myfav)
        self.frame3.pack(side=TOP, fill=BOTH, pady=10)
        Label(self.frame3, width=20).pack(side=LEFT, expand=YES)  # 增加空标签，为了调整按钮位置
        self.btnadd = Button(self.frame3, text='添加', command=self.additem)
        self.btnadd.pack(side=LEFT, expand=YES)
        self.btnsavenew = Button(self.frame3, text='保存列表', command=self.savaUrllist)
        self.btnsavenew.pack(side=LEFT, expand=YES)
        # self.btnsavecsv = Button(self.frame3, text='刷新bookmark表', command=transopenlist2csv)
        # self.btnsavecsv.pack(side=LEFT, expand=YES)
        self.btndel = Button(self.frame3, text='删除', command=self.deleteitem)
        self.btndel.pack(side=LEFT, expand=YES)
        Label(self.frame3, width=20).pack(side=RIGHT, expand=YES)

        # 加载地址列表
        for item in self.urllist:
            self.listbox.insert(END, item)  # 从尾部插入

        # 添加事件处理
        self.doevent()

    def doevent(self):
        # self.keywdbox.bind("<Return>", self.showlist)  # 按回车键，显示搜索结果
        self.keywdbox.bind("<KeyRelease>", self.showlist)  # 实时显示搜索结果
        # self.keywdbox.bind("<BackSpace>", self.showlistAll)
        self.listbox.bind('<Double-Button-1>', self.openurl)  # 双击打开地址
        self.listbox.bind('<Return>', self.openurl)  # 按Enter键打开地址

        self.listbox.bind('<Left>', lambda e: self.keywdbox.focus_set())  # 返回搜索框
        # self.listbox.bind('<Right>', lambda e: self.keywdbox.focus_set())  # 返回搜索框
        self.keywdbox.bind("<Down>", self.jump_to_listbox)  # 按DOWN键，跳到列表中

    def additem(self):
        pw = PopupDialog(self)
        self.wait_window(pw)  # 這一句很重要！！！

    def deleteitem(self):
        index = self.listbox.curselection()
        try:
            item = self.listbox.get(index)
        except TclError:
            showinfo('提示', '请选择需删除的项目！')
            # messagebox.showwarning('警告','请选择需删除的项目！')
            return

        if askyesno('删除', '删除 %s ？' % item):
            self.listbox.delete(index)
            del self.urllist[item]
            showinfo('提示', '删除成功')
        else:
            # messagebox.showinfo('No', 'Quit has been cancelled')
            return



    def openurl(self, event):
        import webbrowser
        urlname = self.listbox.get(self.listbox.curselection())
        url = self.urllist[urlname]  # 根据key值获取对应url值

        if url is not None and url != '':

            webbrowser.open(url)
        else:
            showinfo('Error !', '打开地址失败！地址为空。')

    def jump_to_listbox(self, event):
        if self.listbox.size():
            self.listbox.select_clear(0, END)
            self.listbox.select_set(0)
            self.listbox.activate(0)
            # print(self.listbox.curselection())
            self.listbox.focus_set()

    def showlistAll(self, event):
        keywd = self.keywdbox.get().strip()
        # 退格清空文本框时，重新显示列表
        if len(keywd) == 1:
            self.listbox.delete(0, END)
            for item in self.urllist:
                self.listbox.insert(END, item)  # 从尾部插入

    def showlist(self, event):
        keywd = self.keywdbox.get().strip()
        if keywd:
            self.listbox.delete(0, END)
            # print(urllist)
            for item in self.urllist:
                if (keywd.lower() in item.lower()) or (keywd.lower() in pypinyin.slug(item.lower(), separator='') or
                                                       (keywd.lower() in pypinyin.slug(item.lower(),
                                                                                       style=Style.FIRST_LETTER,
                                                                                       separator=''))):
                    self.listbox.insert(END, item)  # 加载搜索结果
        else:
            self.listbox.delete(0, END)
            for item in self.urllist:
                self.listbox.insert(END, item)  # 空字符时，加载所有列表

favmgr = MyFavApp(frame8myfav)
if favmgr.urllist:
    favmgr.savaUrllist()

#股票---------------------------------
rikwketc=('每1分钟k线数据','每日k线数据')
def printinfostock_k():
    kxiantype=gupiaospin.get()
    print(kxiantype)
    global kxplv
    if kxiantype=='每1分钟k线数据':
        kxplv=1
        print(kxplv)
    # if kxiantype=='每5分钟k线数据':
    #     kxplv=5
    if kxiantype=='每日k线数据':
        kxplv=101
    # if kxiantype=='每周k线数据':
    #     kxplv=102
def printinfostock_fq():
    fuquantype=varstockfuquan.get()
    print(fuquantype)
    global fqtvar
    if fuquantype=='前复权':
        fqtvar=1
        print(fqtvar)
    if fuquantype=='后复权':
        fqtvar=2
    if fuquantype=='不复权':
        fqtvar=0
leftframe2gupiao=ttk.LabelFrame(frame7gupiaork,text='股票',width=620,height=520)
leftframe2gupiao.grid(row=0,column=0,rowspan=6)

glabelgupiao = ttk.Label(leftframe2gupiao, text='选择k线时间周期:')
glabelgupiao.grid(row=0,column=1)
gupiaospin=ttk.Spinbox(leftframe2gupiao,values=rikwketc,command=printinfostock_k)
gupiaospin.grid(row=0,column=2)

varstockfuquan=StringVar()
cbfuquanstock=ttk.Combobox(leftframe2gupiao,textvariable=varstockfuquan,width=7)
cbfuquanstock['value']=('前复权','后复权','不复权')
cbfuquanstock.current(0)
cbfuquanstock.grid(row=1,column=1)
b01fuquan=ttk.Button(leftframe2gupiao,text="选定复权方式",width=13,command=printinfostock_fq)
b01fuquan.grid(row=1,column=2)
lagupiaocode=ttk.Label(leftframe2gupiao,text='插入的股票代码:')
lagupiaocode.grid(row=2,column=1)
t1lagupiaocode=Text(leftframe2gupiao,width=20,height=1)
t1lagupiaocode.grid(row=2,column=2)
b2getstockmyk=ttk.Button(leftframe2gupiao,text="获取股票k线数据",width=15,command=getmystock_kcsv)
b2getstockmyk.grid(row=3,column=2)

la2gupiaoname=ttk.Label(leftframe2gupiao,text='插入的股票名称:')
la2gupiaoname.grid(row=4,column=1)
t2lagupiaoname=Text(leftframe2gupiao,width=20,height=1)
t2lagupiaoname.grid(row=4,column=2)
vscrollbar_gp=ttk.Scrollbar(leftframe2gupiao)
vscrollbar_gp.grid(row=0,column=3,rowspan=7,sticky='ns',padx = 20)

lbstocklist=Listbox(leftframe2gupiao,yscrollcommand=vscrollbar_gp.set ,width=15,height=21,selectmode=SINGLE)
lbstocklist.grid(row=0,column=0,rowspan=7)
vscrollbar_gp.config(command=lbstocklist.yview)

#jisuan ----------------------------------------------------------
rightframe2jdjs=ttk.LabelFrame(frame7gupiaork,text='表达式四则-计算器',width=620,height=520)
rightframe2jdjs.grid(row=0,column=3,rowspan=3)
rightframe3gjjs=ttk.LabelFrame(frame7gupiaork,text='表达式解方程-计算器',width=620,height=520)
rightframe3gjjs.grid(row=4,column=3,rowspan=3)
#计算---------简单-----------------------

def eq_format(eq): #格式化计算式函数
    '''
    :param eq:输入的算术字符串
    :return: 格式化后的列表，例如['-','2','+','3','*','12','/','123']
    '''
    format_list = re.findall('[\d\.]+|\(|\+|\-|\*|\/|\)',eq)
    #print(format_list)      '[\d\.]+|\(|\+|\-|\*|\/|\)'
    return format_list #返回格式化的列表形式内容

def change(eq,count): #解决同时出现+-，--类的格式化列表
    '''
    :param eq:去掉括号以后或者乘除后的格式化列表
    :param count: 发生变化的元素的索引位置
    :return: 返回一个没有+-，--等类的格式化列表内容
    '''
    if eq[count] == '-': #如果第count元素是-的话
        if eq[count-1] == '-': #且第count-1元素也是-
            eq[count-1] = '+' #那么调整count-1元素为+
            del eq[count] #删除第count元素内容
        elif eq[count-1] == '+':
            eq[count-1] = '-'
            del eq[count]
    return eq

def deal_multiplication_division(eq): #处理所有的乘除的计算方程式
    '''
    :param eq:处理带有乘除符号的格式化列表
    :return: 去掉乘除好以后的格式化列表
    '''
    count = 0
    for i in eq:
        if i == '*':
            if eq[count+1] != '-':
                eq[count-1] = float(eq[count-1]) * float(eq[count+1])
                del(eq[count])
                del(eq[count])
            elif eq[count+1] == '-':
                eq[count] = float(eq[count-1]) * float(eq[count+2])
                eq[count - 1] = '-'
                del(eq[count+1])
                del(eq[count+1])
            eq = change(eq,count-1)
            return deal_multiplication_division(eq)
        elif i == '/':
            if eq[count+1] != '-':
                eq[count-1] = float(eq[count-1]) / float(eq[count+1])
                del(eq[count])
                del(eq[count])
            elif eq[count+1] == '-':
                eq[count] = float(eq[count-1]) / float(eq[count+2])
                eq[count-1] = '-'
                del(eq[count+1])
                del(eq[count+1])
            eq = change(eq,count-1)
            return deal_multiplication_division(eq)
        count = count + 1
    return eq

def deal_plus_minus(eq): #处理所有的加减方程式的计算
    '''
    :param eq:只带有加减号的格式化列表
    :return: 计算出整个列表的结果
    '''
    count = 0
    if eq[0] != '-':
        sum = float(eq[0])
    else:
        sum = 0.0
    for i in eq:
        if i == '-':
            sum = sum - float(eq[count+1])
        elif i == '+':
            sum = sum + float(eq[count+1])
        count = count + 1
    if sum >= 0:
        eq = [str(sum)]
    else:
        eq = ['-',str(-sum)]
    return eq

def calculate(s_eq): #处理进行加减乘除
    '''
    :param s_eq:不带括号的格式化列表
    :return: 返回最终的计算结果
    '''
    if '*' or '/' in s_eq:
        s_eq = deal_multiplication_division(s_eq)
    if '+' or '-' in s_eq:
        s_eq = deal_plus_minus(s_eq)
    return s_eq

def simplify(format_list): #递归方式去掉括号，并计算到最后一层没有括号
    '''
    :param format_list:输入的算是格式化列表如['-','2','+','3','*','12','/','123']
    :return:通过递归去掉括号，返回最终简化后没有括号的列表
    '''
    bracket = 0 #用于存放左括号在格式化列表中的索引
    count = 0
    for i in format_list:
        if i == '(':
            bracket = count
        elif i == ')':
            temp = format_list[bracket + 1 : count]
            new_temp = calculate(temp)
            format_list = format_list[:bracket] + new_temp + format_list[count+1:]
            format_list = change(format_list,bracket) #解决去括号后出现的'--','+-'问题
            return simplify(format_list) #递归去掉括号
        count = count + 1
    return format_list #当递归到最后一层层的时候，不在有括号，因此返回最后无括号的列表内容

def calculator(eq): #计算主函数，主要判断最终计算结果的正负值，并返回
    format_list = eq_format(eq) # 把字符串变成格式化的列表形式
    s_eq = simplify(format_list) #去掉括号，得到一个无括号的格式化列表
    ans = calculate(s_eq) #计算最终结果
    if len(ans) == 2: #判断最终结果的正负值并返回结果
        ans = -float(ans[1])
    else:
        ans = float(ans[0])
    return ans #返回最终的结果

def calc():
    equation  = t1jdjs.get(0.0, 'end')
    ans = calculator(equation)

    t1jdjs.delete(0.0, 'end')
    t1jdjs.insert('end', ans)
l1jiandanjisuan=ttk.Label(rightframe2jdjs,text='请输入需要计算的表达式:')
l1jiandanjisuan.grid()
t1jdjs=Text(rightframe2jdjs,width=56,height=5)
t1jdjs.grid()
b1jdjs=ttk.Button(rightframe2jdjs,text="计算",width=14,command=calc)
b1jdjs.grid(row=2,column=0)

def qcjd():
    t1jdjs.delete(0.0,'end')
b3jdjs=ttk.Button(rightframe2jdjs,text="清除输入框",width=14,command=qcjd)
b3jdjs.grid(row=4,column=0)
#计算------end------------------------------------------------------------------------end
import sympy
def calcgaoji():
    equation_gaoji = t1gjjs.get(0.0, 'end').replace('\n','')
    print(equation_gaoji)

    if t2gjjs.get(0.0, 'end').replace('\n','') =='xy':
        x, y = sympy.symbols("x y")
        bdswanteditit=equation_gaoji
        bdscutwanteditit = bdswanteditit.split(',')
        ansgj = sympy.solve([bdscutwanteditit[0],bdscutwanteditit[1]], [x, y])
        print(ansgj)
        t3gjjs.delete(0.0, 'end')
        t3gjjs.insert('end', ansgj)
    if t2gjjs.get(0.0, 'end').replace('\n', '') == 'x':
        x = sympy.symbols("x")
        ansgj = sympy.solve([equation_gaoji], [x])
        print(ansgj)
        t3gjjs.delete(0.0, 'end')
        t3gjjs.insert('end', ansgj)
    if t2gjjs.get(0.0, 'end').replace('\n','') =='xyz':
        x, y ,z= sympy.symbols("x y z")
        bdswanteditit=equation_gaoji
        bdscutwanteditit = bdswanteditit.split(',')
        ansgj = sympy.solve([bdscutwanteditit[0],bdscutwanteditit[1],bdscutwanteditit[2]], [x, y,z])
        print(ansgj)
        t3gjjs.delete(0.0, 'end')
        t3gjjs.insert('end', ansgj)
l1gaojijisuan=ttk.Label(rightframe3gjjs,text='请输入表达式 （可参考下方举例）:')
l1gaojijisuan.grid()
t1gjjs=Text(rightframe3gjjs,width=56,height=1)
t1gjjs.grid()
l2gaojijisuan=ttk.Label(rightframe3gjjs,text='输 xy代表二元 或 x代表一元 或xyz代表三元:')
l2gaojijisuan.grid()
t2gjjs=Text(rightframe3gjjs,width=56,height=1)
t2gjjs.grid()
b1jdjs=ttk.Button(rightframe3gjjs,text="sympy计算",width=13,command=calcgaoji)
b1jdjs.grid()
l3gaojijisuan=ttk.Label(rightframe3gjjs,text='答案：')
l3gaojijisuan.grid()
t3gjjs=Text(rightframe3gjjs,width=56,height=1)
t3gjjs.grid()
def qcgj():
    t1gjjs.delete(0.0,'end')
    t2gjjs.delete(0.0,'end')
    t3gjjs.delete(0.0,'end')

b3fzjs=ttk.Button(rightframe3gjjs,text="清除输入框",width=14,command=qcgj)
b3fzjs.grid()
t4gjjs_smn=Text(rightframe3gjjs,width=56,height=4)
t4gjjs_smn.grid()
gjjssmn='表达式举例 如3*x-2*y-3,x+2*y-5或((x+1)/x + 1/(x-2))-1或x-y+3,x+y,z-y)，如果是二元方程->第二行输入xy，如果三元方程组->第二行输入xyz'
t4gjjs_smn.insert('end', gjjssmn)
#https://www.cnblogs.com/ty123/p/10529541.html
#-------------------------------------------------------------------------------
def starters_gpiaomenu():
    starters_menu = open(os.getcwd()+"\stock\gupiaolist.txt",encoding="GBK")
   # starters_menu.encode('gb2312')
    for line in starters_menu:
        line = line.rstrip()
        lbstocklist.insert(END, line)
starters_gpiaomenu()
def matchmystock():
    mymatchcode=t1lagupiaocode.get(0.0,'end').replace('\n','')
    mymatchname=t2lagupiaoname.get(0.0,'end').replace('\n','')
    lbstocklist.delete(0, END)
    starters_menu = open(os.getcwd() + "\stock\gupiaolist.txt", encoding="GBK")
    for line in starters_menu:
        line = line.rstrip()
        lbstocklist.insert(END, line)
        #lbstocklist.insert(END, '\n')
        if mymatchcode in line:
            t2lagupiaoname.delete(0.0, 'end')
            cutwanteditit2 = line.split('	')
            t2lagupiaoname.insert('end', cutwanteditit2[1])
            t1lagupiaocode.delete(0.0, 'end')
            t1lagupiaocode.insert('end', cutwanteditit2[0])

def matchmystock2():
    mymatchcode=t1lagupiaocode.get(0.0,'end').replace('\n','')
    mymatchname=t2lagupiaoname.get(0.0,'end').replace('\n','')
    lbstocklist.delete(0, END)
    starters_menu = open(os.getcwd() + "\stock\gupiaolist.txt", encoding="GBK")
    for line in starters_menu:
        line = line.rstrip()
        lbstocklist.insert(END, line)


        if  mymatchname in line:
            t1lagupiaocode.delete(0.0, 'end')
            cutwanteditit3 = line.split('	')
            t1lagupiaocode.insert('end', cutwanteditit3[0])
            t2lagupiaoname.delete(0.0, 'end')
            t2lagupiaoname.insert('end', cutwanteditit3[1])
def dfcf_report():
    os.startfile(r'stock\eastmoney-report\report.exe')
def selitemrun():
    t1lagupiaocode.delete(0.0,'end')
    t2lagupiaoname.delete(0.0, 'end')
    indexs=lbstocklist.curselection()
    for index in indexs:
        print(lbstocklist.get(index))
        mysel=lbstocklist.get(index)
    cutwanteditit = mysel.split('	')
    t1lagupiaocode.insert('end',cutwanteditit[0])

    t2lagupiaoname.insert('end',cutwanteditit[1])
b3getstockmyk=ttk.Button(leftframe2gupiao,text="插左侧选中代码",width=15,command=selitemrun)
b3getstockmyk.grid(row=3,column=1)
b4getstockmyk=ttk.Button(leftframe2gupiao,text="填代码配名称",width=15,command=matchmystock)
b4getstockmyk.grid(row=5,column=1)
b5getstockmyk=ttk.Button(leftframe2gupiao,text="填名称配代码",width=15,command=matchmystock2)
b5getstockmyk.grid(row=5,column=2)
# b5getstockrp=ttk.Button(leftframe2gupiao,text="东方财富报表",width=15,command=dfcf_report)
# b5getstockrp.grid(row=6,column=1)
# b6getstockrp=ttk.Button(leftframe2gupiao,text="股票公告",width=15,command=maingetgg)
# b6getstockrp.grid(row=6,column=2)
#行程计划-数据库-----------------------------------------------------------------------------------------
def itemdeleted():
    index2es = lb.curselection()
    if (len(index2es) == 0):
        return
    if (len(index2es) == 1):
        wantdelit=lb.get(index2es)
        print(wantdelit[0]) #
        wantdelititem=wantdelit[0]
        conn = sqlite3.connect("myplan.db")
        cursor = conn.cursor()
        sql = '''DELETE from pcmgr where plan_date = ?'''
        values = cursor.execute(sql, ( wantdelititem, ))
        conn.commit() #update db
    if (len(index2es) > 1):
        for index in index2es:
            # print(lb.get(index))
            mysel_ph = lb.get(index)
            print(mysel_ph[0])  # 序列号 riqi+caseid
            wantdelititem_sn = mysel_ph[0]
            conn = sqlite3.connect("myplan.db")
            cursor = conn.cursor()
            sql = '''DELETE from pcmgr where plan_date = ?'''
            values = cursor.execute(sql, (wantdelititem_sn,))
            conn.commit()  # update db
def db2txt():
    #sel item to txt
    indexs = lb.curselection()
    for index in indexs:
        #print(lb.get(index))
        mysel = lb.get(index)
        print(str(mysel))
        with open("exportplan.txt", "a") as want2file:
            want2file.writelines(
                str(mysel).replace("('", '').replace("')", '').replace("',", '').replace("'", '') + '\n')
        want2file.close()
    # to csv
    csvFile2 = open("exportplan.csv", 'w', newline='', encoding='GB2312')
    writer = csv.writer(csvFile2)
    csvRow = []
    f = open("exportplan.txt", 'r', encoding='GB2312')
    for line in f:
        csvRow = line.split()
        writer.writerow(csvRow)
    f.close()
    csvFile2.close()
    runingpb()
from pandas import read_csv
def csv2db():

    conn = sqlite3.connect("myplan.db")
    df = read_csv('importplan.csv', encoding="GB2312")
    df.to_sql('pcmgr', conn, if_exists='append', index=False)
    runingpb()
def createpcmgr():
    conn = sqlite3.connect("myplan.db")
    cursor = conn.cursor()
    sql = '''Create table pcmgr(
        plan_date text,
        plan_time text,
        plan_plan text)'''
    cursor.execute(sql)
    cursor.close()
    conn.close()
def add_anpc():

    conn = sqlite3.connect("myplan.db")
    cursor = conn.cursor()
    new_plan_date=input_plan_date.get()
    new_plan_time=input_plan_time.get()
    new_plan_plan=input_plan_plan.get()
    newlog = (new_plan_date, new_plan_time, new_plan_plan)
    sql = '''INSERT into pcmgr values(?,?,?)'''
    cursor.execute(sql, newlog)
    conn.commit()
    cursor.close()
    conn.close()

def showallpcs():
    lb.delete(0, END)
    conn = sqlite3.connect("myplan.db")
    cursor = conn.cursor()
    sql = '''SELECT plan_date, plan_time, plan_plan
            from pcmgr'''
    results=cursor.execute(sql)
    allpcs=results.fetchall()
    for anpc in allpcs:
        lb.insert(END, anpc)
    #print(type(anpc)) #tuple
    cursor.close()
    conn.close()

def cleanthem():
    lb.delete(0, END)
#数据库模糊搜索
def searchanpc():
    search_plan_date = input_plan_date.get()
    search_plan_time = input_plan_time.get()
    search_plan_plan = input_plan_plan.get()

    if search_plan_plan != '':
        lb.delete(0, END)
        conn = sqlite3.connect("myplan.db")
        cursor = conn.cursor()
        sql = '''SELECT plan_date, plan_time, plan_plan
                from pcmgr where plan_plan like ?'''
        values = cursor.execute(sql, ( '%'+search_plan_plan+'%',))
        for itt in values:
            lb.insert(END,itt[0] + '   ' + itt[1] + '   ' + itt[2])
        #print(type(itt))#tuple
        cursor.close()
        conn.close()

    if search_plan_date != '':
        lb.delete(0, END)
        conn = sqlite3.connect("myplan.db")
        cursor = conn.cursor()
        sql = '''SELECT plan_date, plan_time, plan_plan
                from pcmgr where plan_date like ?'''
        values = cursor.execute(sql, ('%'+search_plan_date+'%',))

        for itt in values:
            lb.insert(END, itt[0] + '   ' + itt[1] + '   ' + itt[2] )
        cursor.close()
        conn.close()

    if search_plan_time!= '':
        lb.delete(0, END)
        conn = sqlite3.connect("myplan.db")
        cursor = conn.cursor()
        sql = '''SELECT plan_date, plan_time, plan_plan
                from pcmgr where plan_time like ?'''
        values = cursor.execute(sql, ('%'+search_plan_time+'%',))
        for itt in values:
            lb.insert(END, itt[0] + '   ' + itt[1] + '   ' + itt[2])
        cursor.close()
        conn.close()
def readyedit():
    index = lb.curselection()
    if (len(index) == 0):
        return
    # print(cutwanteditit[1]) #型号
    # print(wanteditit[0])  # 序列号
    # print(wanteditit[1])  # 型号
    wanteditit = lb.get(index)
    print(type(wanteditit))
    if type(wanteditit) is tuple:
        wanteditititem = wanteditit[0]  # 序列号
        wanteditititem1 = wanteditit[1]  # 型号
        wanteditititem2 = wanteditit[2]  # ip地址
        gentry1.delete(0, END)
        gentry1.insert(0, wanteditititem)
        gentry2.delete(0, END)
        gentry2.insert(0, wanteditititem1)
        gentry3.delete(0, END)
        gentry3.insert(0, wanteditititem2)

    if type(wanteditit) is not tuple:
        cutwanteditit = wanteditit.split('   ')
        print(cutwanteditit[0])  # 序列号 切割字符串
        gentry1.delete(0, END)
        gentry1.insert(0, cutwanteditit[0])
        gentry2.delete(0, END)
        gentry2.insert(0, cutwanteditit[1])
        gentry3.delete(0, END)
        gentry3.insert(0, cutwanteditit[2])
def cleanabove():
    gentry1.delete(0, END)
    gentry2.delete(0, END)
    gentry3.delete(0, END)
def howmany_item_sel():
    gentry13.delete(0, END)
    index = lb.curselection()
    howmany_item=len(index)
    gentry13.insert(0,howmany_item)
def updateanpc():
    update_plan_date = input_plan_date.get()
    update_plan_time = input_plan_time.get()
    update_plan_plan = input_plan_plan.get()
    if update_plan_date is not None:
        index = lb.curselection()
        if (len(index) == 0):
            return
        # lb.delete(index)
        wanteditit = lb.get(index)
        #print(cutwanteditit[0])  # 序列号 切割字符串
        wanteditititem = wanteditit[0]
        conn = sqlite3.connect("myplan.db")
        cursor = conn.cursor()
        sql = '''UPDATE pcmgr set plan_date = ? where plan_date = ?'''
        if type(wanteditit) is not tuple:
            cutwanteditit = wanteditit.split('    ')
            param1=(update_plan_date,cutwanteditit[0])
            values = cursor.execute(sql, param1)
        if type(wanteditit) is  tuple:
            param = (update_plan_date, wanteditititem)
            values = cursor.execute(sql,param)
        conn.commit()  # update db

    if update_plan_plan is not None:
        index = lb.curselection()
        if (len(index) == 0):
            return
        # lb.delete(index)
        wanteditit = lb.get(index)
        #print(wanteditit[0])  #
        #print(cutwanteditit[0])  #  切割字符串
        wanteditititem = wanteditit[0]
        conn = sqlite3.connect("myplan.db")
        cursor = conn.cursor()
        sql = '''UPDATE pcmgr set plan_plan = ? where plan_date = ?'''
        if type(wanteditit) is not tuple:
            cutwanteditit = wanteditit.split('    ')
            param1=(update_plan_plan,cutwanteditit[0])
            values = cursor.execute(sql, param1)
        if type(wanteditit) is  tuple:
            param = (update_plan_plan, wanteditititem)
            values = cursor.execute(sql,param)
        conn.commit()  # update db

    if update_plan_time is not None:
        index = lb.curselection()
        if (len(index) == 0):
            return
        # lb.delete(index)
        wanteditit = lb.get(index)
        wanteditititem = wanteditit[0]
        conn = sqlite3.connect("myplan.db")
        cursor = conn.cursor()
        sql = '''UPDATE pcmgr set plan_time = ? where plan_date = ?'''
        if type(wanteditit) is not tuple:
            cutwanteditit = wanteditit.split('    ')
            param1=(update_plan_time,cutwanteditit[0])
            values = cursor.execute(sql, param1)
        if type(wanteditit) is  tuple:
            param = (update_plan_time, wanteditititem)
            values = cursor.execute(sql,param)
        conn.commit()  # update db

#表的操作
b1=ttk.Button(rightframe,text="日历计划建库",width=21,command=createpcmgr)
b1.grid(row=0,column=0)
b2=ttk.Button(rightframe,text="新添填写条目",width=21,command=add_anpc)
b2.grid(row=0,column=1)
b3=ttk.Button(rightframe,text="删除选中条目",width=21,command=itemdeleted)
b3.grid(row=0,column=2)
b11=ttk.Button(rightframe,text="多选导出exportplan.csv",width=20,command=db2txt)
b11.grid(row=0,column=3)
b4=ttk.Button(rightframe,text="保存修改条目",width=21,command=updateanpc)
b4.grid(row=1,column=0)
b5=ttk.Button(rightframe,text="查看所有条目",width=21,command=showallpcs)
b5.grid(row=1,column=1)
b6=ttk.Button(rightframe,text="查询某个条目",width=21,command=searchanpc)
b6.grid(row=1,column=2)
b10=ttk.Button(rightframe,text="importplan.csv入库",width=20,command=csv2db)
b10.grid(row=1,column=3)
b7=ttk.Button(rightframe,text="点下方单条->点我->改上方项->点'保存修改'->完成",width=41,command=readyedit)
b7.grid(row=5,column=1,columnspan=3,rowspan=2)

b9=ttk.Button(rightframe,text="清空上方填项",width=21,command=cleanabove)
b9.grid(row=5,column=0)
b8=ttk.Button(rightframe,text="清空下方显示区域",width=21,command=cleanthem)
b8.grid(row=6,column=0)


#信息填写区域
l1=ttk.Label(rightframe,text='<-日期查询和插入->日期： ',width=21)
l1.grid(row=2,column=0)
input_plan_date = StringVar()
gentry1 = ttk.Entry(rightframe, textvariable=input_plan_date, width=21)
gentry1.grid(row=2,column=1)
l2=ttk.Label(rightframe,text=' 时间： ')
l2.grid(row=2,column=2)
input_plan_time = StringVar()
gentry2 = ttk.Entry(rightframe, textvariable=input_plan_time, width=21)
gentry2.grid(row=2,column=3)
l3=ttk.Label(rightframe,text=' 计划任务： ')
l3.grid(row=3,column=0,)
input_plan_plan = StringVar()
gentry3 = ttk.Entry(rightframe, textvariable=input_plan_plan, width=70)
gentry3.grid(row=3,column=1,columnspan=3)

mylisttitle=" 日期 -------- CASE_ID ------ 时间 - 计划任务 ---请保留新加条目日期后自动添加的的CASE_ID号--------------------------------- "
l13=ttk.Label(rightframe,text=mylisttitle)
l13.grid(columnspan=6)


vscrollbar_plan=ttk.Scrollbar(frame6rilichaxun)
vscrollbar_plan.pack(side=RIGHT,fill=Y)
lb=Listbox(rightframe ,yscrollcommand=vscrollbar_plan.set,width=100,height=12,selectmode=EXTENDED)
lb.grid(columnspan=6)
vscrollbar_plan.config(command=lb.yview)
b12=ttk.Button(rightframe,text="计数选择条目",width=21,command=howmany_item_sel)
b12.grid(row=9,column=0)
input_howmany_sel = StringVar()
gentry13 = ttk.Entry(rightframe, textvariable=input_howmany_sel, width=15)
gentry13.grid(row=9,column=1)
#行程计划-数据库-------------------over-----------------------------
#日历查询-----------------------------
import calendar

datetime = calendar.datetime.datetime
timedelta = calendar.datetime.timedelta


class Calendar:

    def __init__(s, point=None, position=None):
        # point  提供一个基点，来确定窗口位置
        # position 窗口在点的位置 'ur'-右上, 'ul'-左上, 'll'-左下, 'lr'-右下
        # s.master = tk.Tk()
        s.master = Toplevel()
        s.master.withdraw()
        fwday = calendar.SUNDAY

        year = datetime.now().year
        month = datetime.now().month
        locale = None
        sel_bg = '#ecffc4'
        sel_fg = '#05640e'

        s._date = datetime(year, month, 1)
        s._selection = None  # 设置为未选中日期

        s.G_Frame = ttk.Frame(s.master)

        s._cal = s.__get_calendar(locale, fwday)

        s.__setup_styles()  # 创建自定义样式
        s.__place_widgets()  # pack/grid 小部件
        s.__config_calendar()  # 调整日历列和安装标记
        # 配置画布和正确的绑定，以选择日期。
        s.__setup_selection(sel_bg, sel_fg)

        # 存储项ID，用于稍后插入。
        s._items = [s._calendar.insert('', 'end', values = '') for _ in range(6)]

        # 在当前空日历中插入日期
        s._update()

        s.G_Frame.pack(expand = 1, fill = 'both')
        s.master.overrideredirect(1)
        s.master.update_idletasks()
        width, height = s.master.winfo_reqwidth(), s.master.winfo_reqheight()
        if point and position:
            if position == 'ur':
                x, y = point[0], point[1] - height
            elif position == 'lr':
                x, y = point[0], point[1]
            elif position == 'ul':
                x, y = point[0] - width, point[1] - height
            elif position == 'll':
                x, y = point[0] - width, point[1]
        else:
            x, y = (s.master.winfo_screenwidth() - width) / 2, (s.master.winfo_screenheight() - height) / 2
        s.master.geometry('%dx%d+%d+%d' % (width, height, x, y))  # 窗口位置居中
        s.master.after(300, s._main_judge)
        s.master.deiconify()
        s.master.focus_set()
        s.master.wait_window()  # 这里应该使用wait_window挂起窗口，如果使用mainloop,可能会导致主程序很多错误

    def __get_calendar(s, locale, fwday):
        # 实例化适当的日历类
        if locale is None:
            return calendar.TextCalendar(fwday)
        else:
            return calendar.LocaleTextCalendar(fwday, locale)

    def __setitem__(s, item, value):
        if item in ('year', 'month'):
            raise AttributeError("attribute '%s' is not writeable" % item)
        elif item == 'selectbackground':
            s._canvas['background'] = value
        elif item == 'selectforeground':
            s._canvas.itemconfigure(s._canvas.text, item = value)
        else:
            s.G_Frame.__setitem__(s, item, value)

    def __getitem__(s, item):
        if item in ('year', 'month'):
            return getattr(s._date, item)
        elif item == 'selectbackground':
            return s._canvas['background']
        elif item == 'selectforeground':
            return s._canvas.itemcget(s._canvas.text, 'fill')
        else:
            r = ttk.tclobjs_to_py({item: ttk.Frame.__getitem__(s, item)})
            return r[item]

    def __setup_styles(s):
        # 自定义TTK风格
        style = ttk.Style(s.master)
        arrow_layout = lambda dir: (
            [('Button.focus', {'children': [('Button.%sarrow' % dir, None)]})]
        )
        style.layout('L.TButton', arrow_layout('left'))
        style.layout('R.TButton', arrow_layout('right'))

    def __place_widgets(s):
        # 标头框架及其小部件
        Input_judgment_num = s.master.register(s.Input_judgment)  # 需要将函数包装一下，必要的
        hframe = ttk.Frame(s.G_Frame)
        gframe = ttk.Frame(s.G_Frame)
        bframe = ttk.Frame(s.G_Frame)
        hframe.pack(in_ = s.G_Frame, side = 'top', pady = 5, anchor = 'center')
        gframe.pack(in_ = s.G_Frame, fill = X, pady = 5)
        bframe.pack(in_ = s.G_Frame, side = 'bottom', pady = 5)

        lbtn = ttk.Button(hframe, style = 'L.TButton', command = s._prev_month)
        lbtn.grid(in_ = hframe, column = 0, row = 0, padx = 12)
        rbtn = ttk.Button(hframe, style = 'R.TButton', command = s._next_month)
        rbtn.grid(in_ = hframe, column = 5, row = 0, padx = 12)

        s.CB_year = ttk.Combobox(hframe, width = 5, values = [str(year) for year in
                                                              range(datetime.now().year, datetime.now().year - 11, -1)],
                                 validate = 'key', validatecommand = (Input_judgment_num, '%P'))
        s.CB_year.current(0)
        s.CB_year.grid(in_ = hframe, column = 1, row = 0)
        s.CB_year.bind('<KeyPress>', lambda event: s._update(event, True))
        s.CB_year.bind("<<ComboboxSelected>>", s._update)
        ttk.Label(hframe, text = '年', justify = 'left').grid(in_ = hframe, column = 2, row = 0, padx = (0, 5))

        s.CB_month = ttk.Combobox(hframe, width = 3, values = ['%02d' % month for month in range(1, 13)],
                                  state = 'readonly')
        s.CB_month.current(datetime.now().month - 1)
        s.CB_month.grid(in_ = hframe, column = 3, row = 0)
        s.CB_month.bind("<<ComboboxSelected>>", s._update)
        ttk.Label(hframe, text = '月', justify = 'left').grid(in_ = hframe, column = 4, row = 0)

        # 日历部件
        s._calendar = ttk.Treeview(gframe, show = '', selectmode = 'none', height = 7)
        s._calendar.pack(expand = 1, fill = 'both', side = 'bottom', padx = 5)

        ttk.Button(bframe, text = "确 定", width = 6, command = lambda: s._exit(True)).grid(row = 0, column = 0,
                                                                                          sticky = 'ns', padx = 20)
        ttk.Button(bframe, text = "取 消", width = 6, command = s._exit).grid(row = 0, column = 1, sticky = 'ne',
                                                                            padx = 20)

        ttk.Frame(s.G_Frame, ).place(x = 0, y = 0, relx = 0, rely = 0, relwidth = 1, relheigh = 2 / 200)
        ttk.Frame(s.G_Frame,).place(x = 0, y = 0, relx = 0, rely = 198 / 200, relwidth = 1,
                                                  relheigh = 2 / 200)
        ttk.Frame(s.G_Frame,).place(x = 0, y = 0, relx = 0, rely = 0, relwidth = 2 / 200, relheigh = 1)
        ttk.Frame(s.G_Frame, ).place(x = 0, y = 0, relx = 198 / 200, rely = 0, relwidth = 2 / 200,
                                                  relheigh = 1)

    def __config_calendar(s):
        # cols = s._cal.formatweekheader(3).split()
        cols = ['日', '一', '二', '三', '四', '五', '六']
        s._calendar['columns'] = cols
        s._calendar.tag_configure('header', background = 'grey90')
        s._calendar.insert('', 'end', values = cols, tag = 'header')
        # 调整其列宽
        font = Font()
        maxwidth = max(font.measure(col) for col in cols)
        for col in cols:
            s._calendar.column(col, width = maxwidth, minwidth = maxwidth,
                               anchor = 'center')

    def __setup_selection(s, sel_bg, sel_fg):
        def __canvas_forget(evt):
            canvas.place_forget()
            s._selection = None

        s._font = Font()
        s._canvas = canvas = Canvas(s._calendar, background = sel_bg, borderwidth = 0, highlightthickness = 0)
        canvas.text = canvas.create_text(0, 0, fill = sel_fg, anchor = 'w')

        canvas.bind('<Button-1>', __canvas_forget)
        s._calendar.bind('<Configure>', __canvas_forget)
        s._calendar.bind('<Button-1>', s._pressed)

    def _build_calendar(s):
        year, month = s._date.year, s._date.month

        # update header text (Month, YEAR)
        header = s._cal.formatmonthname(year, month, 0)

        # 更新日历显示的日期
        cal = s._cal.monthdayscalendar(year, month)
        for indx, item in enumerate(s._items):
            week = cal[indx] if indx < len(cal) else []
            fmt_week = [('%02d' % day) if day else '' for day in week]
            s._calendar.item(item, values = fmt_week)

    def _show_select(s, text, bbox):
        """为新的选择配置画布。"""
        x, y, width, height = bbox

        textw = s._font.measure(text)

        canvas = s._canvas
        canvas.configure(width = width, height = height)
        canvas.coords(canvas.text, (width - textw) / 2, height / 2 - 1)
        canvas.itemconfigure(canvas.text, text = text)
        canvas.place(in_ = s._calendar, x = x, y = y)

    def _pressed(s, evt=None, item=None, column=None, widget=None):
        """在日历的某个地方点击。"""
        if not item:
            x, y, widget = evt.x, evt.y, evt.widget
            item = widget.identify_row(y)
            column = widget.identify_column(x)

        if not column or not item in s._items:
            # 在工作日行中单击或仅在列外单击。
            return

        item_values = widget.item(item)['values']
        if not len(item_values):  # 这个月的行是空的。
            return

        text = item_values[int(column[1]) - 1]
        if not text:  # 日期为空
            return

        bbox = widget.bbox(item, column)
        if not bbox:  # 日历尚不可见
            s.master.after(20, lambda: s._pressed(item = item, column = column, widget = widget))
            return

        # 更新，然后显示选择
        text = '%02d' % text
        s._selection = (text, item, column)
        s._show_select(text, bbox)

    def _prev_month(s):
        """更新日历以显示前一个月。"""
        s._canvas.place_forget()
        s._selection = None

        s._date = s._date - timedelta(days = 1)
        s._date = datetime(s._date.year, s._date.month, 1)
        s.CB_year.set(s._date.year)
        s.CB_month.set(s._date.month)
        s._update()

    def _next_month(s):
        """更新日历以显示下一个月。"""
        s._canvas.place_forget()
        s._selection = None

        year, month = s._date.year, s._date.month
        s._date = s._date + timedelta(
            days = calendar.monthrange(year, month)[1] + 1)
        s._date = datetime(s._date.year, s._date.month, 1)
        s.CB_year.set(s._date.year)
        s.CB_month.set(s._date.month)
        s._update()

    def _update(s, event=None, key=None):
        """刷新界面"""
        if key and event.keysym != 'Return': return
        year = int(s.CB_year.get())
        month = int(s.CB_month.get())
        if year == 0 or year > 9999: return
        s._canvas.place_forget()
        s._date = datetime(year, month, 1)
        s._build_calendar()  # 重建日历

        if year == datetime.now().year and month == datetime.now().month:
            day = datetime.now().day
            for _item, day_list in enumerate(s._cal.monthdayscalendar(year, month)):
                if day in day_list:
                    item = 'I00' + str(_item + 2)
                    column = '#' + str(day_list.index(day) + 1)
                    s.master.after(100, lambda: s._pressed(item = item, column = column, widget = s._calendar))

    def _exit(s, confirm=False):
        """退出窗口"""
        if not confirm: s._selection = None
        s.master.destroy()

    def _main_judge(s):
        """判断窗口是否在最顶层"""
        try:
            # s.master 为 TK 窗口
            # if not s.master.focus_displayof(): s._exit()
            # else: s.master.after(10, s._main_judge)

            # s.master 为 toplevel 窗口
            if s.master.focus_displayof() == None or 'toplevel' not in str(s.master.focus_displayof()):
                s._exit()
            else:
                s.master.after(10, s._main_judge)
        except:
            s.master.after(10, s._main_judge)

    # s.master.tk_focusFollowsMouse() # 焦点跟随鼠标

    def selection(s):
        """返回表示当前选定日期的日期时间。"""
        if not s._selection: return None

        year, month = s._date.year, s._date.month
        return str(datetime(year, month, int(s._selection[0])))[:10]

    def Input_judgment(s, content):
        """输入判断"""
        # 如果不加上==""的话，就会发现删不完。总会剩下一个数字
        if content.isdigit() or content == "":
            return True
        else:
            return False
width, height = frame6rilichaxun.winfo_reqwidth() + 50, 50
x, y = (frame6rilichaxun.winfo_screenwidth() - width )/2, (frame6rilichaxun.winfo_screenheight() - height)/2
date_str = StringVar()
mydate = ttk.Entry(frame6rilichaxun, textvariable = date_str)
#date.place(x = 0, y = 0, relx = 5 / 20, rely = 1 / 6, relwidth = 14 / 10, relheigh = 1 / 5)
mydate.pack()
# Calendar((x, y), 'ur').selection() 获取日期，x,y为点坐标

date_str_gain = lambda: [
    date_str.set(myydate)
    for myydate in [Calendar((x, y), 'ur').selection()]
    if myydate]

myrilibtn=ttk.Button(frame6rilichaxun, text = '日期查询', command = date_str_gain)
myrilibtn.pack()
def charuriqi():
    gentry1.insert(0, date_str.get())
    gentry1.insert(END, '-CASE_ID:' + str(random.randint(0, 999999)))
myrilibtn=ttk.Button(frame6rilichaxun, text = '插入->', command = charuriqi)
myrilibtn.pack()
#https://www.jb51.net/article/181869.htm
#-----part2-https://blog.csdn.net/y472360651/article/details/82291753
yearchaxun=ttk.Label(frame6rilichaxun,text='年份')
yearchaxun.pack()
combobox1=ttk.Combobox(frame6rilichaxun)#可自行输入年份或从下拉
combobox1['values'] =[i for i in range(1980, 2080, 1)]
combobox1.pack()

monthchaxun=ttk.Label(frame6rilichaxun,text='月份')
monthchaxun.pack()
combobox2= ttk.Combobox(frame6rilichaxun)
combobox2['values']= [i for i in range(1, 13, 1)]
combobox2.pack()
var = StringVar()
q= ttk.Label(frame6rilichaxun, textvariable=var)
var.set('请选择年份和月份')
q. pack()
def searchday():
    num1= combobox1.get()
    num2=combobox2.get()
    calendar.weekheader(4)
    calendar.setfirstweekday(firstweekday = 6)
    var.set(calendar. month(int(num1), int(num2),w=2))
button=ttk.Button(frame6rilichaxun,text='查询', command=searchday)
button.pack()
##日历查询---------------------over--------
#数据图表------------------------------------------------------------- python图形可视化库
def draw_pie():
    boy = t13.get(0.0, 'end') #"""单独画饼图"""
    name01 = t1.get(0.0, 'end')
    name02 = t3.get(0.0, 'end')
    name03 = t5.get(0.0, 'end')
    name04 = t7.get(0.0, 'end')
    name05 = te15.get(0.0, 'end')
    name06 = te16.get(0.0, 'end')
    name07 = te17.get(0.0, 'end')
    name08 = te18.get(0.0, 'end')
    name09 = te19.get(0.0, 'end')
    name10 = te20.get(0.0, 'end')
    name11 = te21.get(0.0, 'end')
    name12 = te22.get(0.0, 'end')
    value01 = t2.get(0.0, 'end')
    value02 = t4.get(0.0, 'end')
    value03 = t6.get(0.0, 'end')
    value04 = t8.get(0.0, 'end')
    value05 = tex5.get(0.0, 'end')
    value06 = tex6.get(0.0, 'end')
    value07 = tex7.get(0.0, 'end')
    value08 = tex8.get(0.0, 'end')
    value09 = tex9.get(0.0, 'end')
    value10 = tex10.get(0.0, 'end')
    value11 = tex11.get(0.0, 'end')
    value12 = tex12.get(0.0, 'end')

    boyandgirl = title_all_chart.get(0.0, 'end')
    labels = name01, name02, name03, name04,name05,name06,name07,name08,name09,name10,name11,name12
    sizes =value01, value02, value03,value04,value05, value06, value07,value08,value09, value10, value11,value12
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    colors = 'red', 'deeppink', 'GoldenRod', 'green', 'cyan', 'Plum', 'blue', 'Pink', 'Maroon', 'orange', 'Cadetblue', 'Purple'
    explode = 0, 0.1, 0, 0 ,0,0,0,0,0,0,0,0 #第二个元素偏离圆心 0.1
    plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=10)
    plt.axis('equal')
    plt.title(boyandgirl)
    plt.show()

import numpy as np
# import numpy as np
# import matplotlib.pyplot as plt
def leida():
    boy = t13.get(0.0, 'end') #"""雷达图"""
    name01 = str(t1.get(0.0, 'end').replace('\n',''))
    name02 = str(t3.get(0.0, 'end').replace('\n',''))
    name03 =str( t5.get(0.0, 'end').replace('\n',''))
    name04 =str( t7.get(0.0, 'end').replace('\n',''))
    name05 = str(te15.get(0.0, 'end').replace('\n',''))
    name06 = str(te16.get(0.0, 'end').replace('\n',''))
    print(name06)
    girl = t14.get(0.0, 'end')
    value01 = float(t2.get(0.0, 'end'))
    value02 = float(t4.get(0.0, 'end'))
    value03 =float( t6.get(0.0, 'end'))
    value04 =float( t8.get(0.0, 'end'))
    value05 = float(tex5.get(0.0, 'end'))
    value06 = float(tex6.get(0.0, 'end'))

    boyandgirl = title_all_chart.get(0.0, 'end')
    # 中文和负号的正常显示
    plt.rcParams['font.sans-serif'] = 'Microsoft YaHei'
    plt.rcParams['axes.unicode_minus'] = False
    # 使用ggplot的风格绘图
    plt.style.use('ggplot')
    values = [value01, value02, value03,value04,value05, value06]

    feature = [name01, name02, name03, name04,name05,name06]
    labels = np.array(feature)
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    dataLenth = 6 # 数据个数

    data = np.array(values)

    angles = np.linspace(0, 2 * np.pi, dataLenth, endpoint = False)

    data = np.concatenate((data, [data[0]]))  # 闭合

    angles = np.concatenate((angles, [angles[0]]))  # 闭合

    fig = plt.figure()
    ax = fig.add_subplot(111, polar = True)  # polar参数！！
    ax.plot(angles, data, 'bo-', linewidth = 2,label = boy)  # 画线ax.fill(angles, data, facecolor='r', alpha=0.25)# 填充
    ax.fill(angles, data, 'r', alpha = 0.5)


    valueb01 = float(t9.get(0.0, 'end'))
    valueb02 = float(t10.get(0.0, 'end'))
    valueb03 = float(t11.get(0.0, 'end'))
    valueb04 = float(t12.get(0.0, 'end'))
    valueb05 = float(tex5bj.get(0.0, 'end'))
    valueb06 = float(tex6bj.get(0.0, 'end'))
    values_2 = [valueb01, valueb02, valueb03, valueb04, valueb05, valueb06]
    dataLenth_2 = 6  # 数据个数
    data2 = np.array(values_2)
    angles2 = np.linspace(0, 2 * np.pi, dataLenth_2, endpoint = False)
    data2 = np.concatenate((data2, [data[0]]))  # 闭合
    angles2 = np.concatenate((angles2, [angles[0]]))  # 闭合
    ax.plot(angles2, data2, 'o-', linewidth = 2,label = girl)
    ax.fill(angles2, data2, 'b', alpha = 0.5)

    ax.set_thetagrids(angles * 180 / np.pi, labels)
    ax.set_title(boyandgirl, va = 'bottom')
    ax.set_rlim(0, 10)
    ax.grid(True)
    plt.legend()
    plt.show()

def draw_zhu_chart():
    boy = t13.get(0.0, 'end')
    name01 = t1.get(0.0, 'end')
    name02 = t3.get(0.0, 'end')
    name03 = t5.get(0.0, 'end')
    name04 = t7.get(0.0, 'end')
    name05 = te15.get(0.0, 'end')
    name06 = te16.get(0.0, 'end')
    name07 = te17.get(0.0, 'end')
    name08 = te18.get(0.0, 'end')
    name09 = te19.get(0.0, 'end')
    name10 = te20.get(0.0, 'end')
    name11 = te21.get(0.0, 'end')
    name12 = te22.get(0.0, 'end')
    value01 = float(t2.get(0.0, 'end'))
    value02 =float( t4.get(0.0, 'end'))
    value03 =float( t6.get(0.0, 'end'))
    value04 =float( t8.get(0.0, 'end'))
    value05 = float(tex5.get(0.0, 'end'))
    value06 = float(tex6.get(0.0, 'end'))
    value07 =float( tex7.get(0.0, 'end'))
    value08 =float( tex8.get(0.0, 'end'))
    value09 =float( tex9.get(0.0, 'end'))
    value10 =float( tex10.get(0.0, 'end'))
    value11 = float(tex11.get(0.0, 'end'))
    value12 =float( tex12.get(0.0, 'end'))
    boyandgirl=title_all_chart.get(0.0, 'end')
    name_list = [name01, name02, name03, name04,name05,name06,name07,name08,name09,name10,name11,name12]
    num_list = [value01, value02, value03,value04,value05, value06, value07,value08,value09, value10, value11,value12]
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    colors = 'red', 'deeppink', 'GoldenRod', 'green', 'cyan', 'Plum', 'blue','Pink', 'Maroon', 'orange', 'Cadetblue', 'Purple'
    plt.bar(range(len(num_list)), num_list, color=colors ,tick_label=name_list)
    plt.title(boyandgirl)
    plt.show()
def bin_zhu_chart():
    name01 = t1.get(0.0, 'end')
    name02 = t3.get(0.0, 'end')
    name03 = t5.get(0.0, 'end')
    name04 = t7.get(0.0, 'end')
    name05 = te15.get(0.0, 'end')
    name06 = te16.get(0.0, 'end')
    name07 = te17.get(0.0, 'end')
    name08 = te18.get(0.0, 'end')
    name09 = te19.get(0.0, 'end')
    name10 = te20.get(0.0, 'end')
    name11 = te21.get(0.0, 'end')
    name12 = te22.get(0.0, 'end')
    value01 =float( t2.get(0.0, 'end'))
    value02 =float( t4.get(0.0, 'end'))
    value03 =float( t6.get(0.0, 'end'))
    value04 = float(t8.get(0.0, 'end'))
    value05 =float( tex5.get(0.0, 'end'))
    value06 =float( tex6.get(0.0, 'end'))
    value07 =float( tex7.get(0.0, 'end'))
    value08 =float( tex8.get(0.0, 'end'))
    value09 =float( tex9.get(0.0, 'end'))
    value10 =float( tex10.get(0.0, 'end'))
    value11 =float( tex11.get(0.0, 'end'))
    value12 =float( tex12.get(0.0, 'end'))
    valueb01 = float(t9.get(0.0, 'end'))
    valueb02 = float(t10.get(0.0, 'end'))
    valueb03 = float(t11.get(0.0, 'end'))
    valueb04 = float(t12.get(0.0, 'end'))
    valueb05 = float(tex5bj.get(0.0, 'end'))
    valueb06 = float(tex6bj.get(0.0, 'end'))
    valueb07 = float(tex7bj.get(0.0, 'end'))
    valueb08 = float(tex8bj.get(0.0, 'end'))
    valueb09 =float( tex9bj.get(0.0, 'end'))
    valueb10 =float( tex10bj.get(0.0, 'end'))
    valueb11 = float(tex11bj.get(0.0, 'end'))
    valueb12 = float(tex12bj.get(0.0, 'end'))
    boy=t13.get(0.0, 'end')
    girl=t14.get(0.0, 'end')
    boyandgirl = title_all_chart.get(0.0, 'end')
    name_list = [name01, name02, name03, name04,name05,name06,name07,name08,name09,name10,name11,name12]
    num_list = [value01, value02, value03,value04,value05, value06, value07,value08,value09, value10, value11,value12]
    num_list1 = [valueb01, valueb02, valueb03, valueb04,valueb05, valueb06, valueb07, valueb08,valueb09, valueb10, valueb11, valueb12]
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    x = list(range(len(num_list)))
    total_width, n = 1.1, 2
    width = total_width / n
    plt.bar(x, num_list, width=width, label=boy, fc='y')
    for i in range(len(x)):
        x[i] = x[i] + width
    plt.bar(x, num_list1, width=width, label=girl, tick_label=name_list, fc='r')
    plt.title(boyandgirl)
    plt.legend()
    plt.show()
def shuang_bintu():
    name01 = t1.get(0.0, 'end')
    name02 = t3.get(0.0, 'end')
    name03 = t5.get(0.0, 'end')
    name04 = t7.get(0.0, 'end')
    name05 = te15.get(0.0, 'end')
    name06 = te16.get(0.0, 'end')
    name07 = te17.get(0.0, 'end')
    name08 = te18.get(0.0, 'end')
    name09 = te19.get(0.0, 'end')
    name10 = te20.get(0.0, 'end')
    name11 = te21.get(0.0, 'end')
    name12 = te22.get(0.0, 'end')
    value01 =float( t2.get(0.0, 'end'))
    value02 =float( t4.get(0.0, 'end'))
    value03 =float( t6.get(0.0, 'end'))
    value04 = float(t8.get(0.0, 'end'))
    value05 =float( tex5.get(0.0, 'end'))
    value06 =float( tex6.get(0.0, 'end'))
    value07 =float( tex7.get(0.0, 'end'))
    value08 =float( tex8.get(0.0, 'end'))
    value09 =float( tex9.get(0.0, 'end'))
    value10 =float( tex10.get(0.0, 'end'))
    value11 =float( tex11.get(0.0, 'end'))
    value12 =float( tex12.get(0.0, 'end'))
    valueb01 = float(t9.get(0.0, 'end'))
    valueb02 = float(t10.get(0.0, 'end'))
    valueb03 = float(t11.get(0.0, 'end'))
    valueb04 = float(t12.get(0.0, 'end'))
    valueb05 = float(tex5bj.get(0.0, 'end'))
    valueb06 = float(tex6bj.get(0.0, 'end'))
    valueb07 = float(tex7bj.get(0.0, 'end'))
    valueb08 = float(tex8bj.get(0.0, 'end'))
    valueb09 =float( tex9bj.get(0.0, 'end'))
    valueb10 =float( tex10bj.get(0.0, 'end'))
    valueb11 = float(tex11bj.get(0.0, 'end'))
    valueb12 = float(tex12bj.get(0.0, 'end'))
    boy=t13.get(0.0, 'end')
    girl=t14.get(0.0, 'end')
    boyandgirl = title_all_chart.get(0.0, 'end')
    num_list1 = [value01, value02, value03,value04,value05, value06, value07,value08,value09, value10, value11,value12]
    num_list2 = [valueb01, valueb02, valueb03, valueb04,valueb05, valueb06, valueb07, valueb08,valueb09, valueb10, valueb11, valueb12]
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    colors = ['red', 'deeppink', 'GoldenRod', 'green', 'cyan', 'Plum', 'blue', 'Pink', 'Maroon', 'orange', 'Cadetblue', 'Purple']
    plt.figure(figsize=(5, 4))
    labels = [name01, name02, name03, name04,name05,name06,name07,name08,name09,name10,name11,name12]
    wedges1, texts1, autotexts1 = plt.pie(num_list1,autopct = "%3.1f%%",radius = 1,pctdistance = 0.85,colors = colors,startangle = 180,textprops = {'color': 'w'},wedgeprops = {'width': 0.3, 'edgecolor': 'g'})
    wedges2, texts2, autotexts2 = plt.pie(num_list2,autopct= '%3.1f%%',radius = 0.7, pctdistance = 0.95,colors = colors,startangle = 180,textprops = {'color': 'b'},wedgeprops = {'width': 0.4, 'edgecolor': 'b'}  )
    plt.legend(wedges1,labels,fontsize=12,title='all', loc = 'upper left',bbox_to_anchor = (1, 0.8) ,labels=labels)
    plt.setp(autotexts1, size=8, weight='bold')
    plt.setp(autotexts2, size=8, weight='bold')
    plt.setp(texts1, size=100)
    plt.title(boyandgirl, fontsize = 20)
    plt.show()
#from matplotlib import font_manager
def zhexiantu():
    #my_font = font_manager.FontProperties(fname = "C:\Windows\Fonts\simsun.ttc")
    name01 = t1.get(0.0, 'end')
    name02 = t3.get(0.0, 'end')
    name03 = t5.get(0.0, 'end')
    name04 = t7.get(0.0, 'end')
    name05 = te15.get(0.0, 'end')
    name06 = te16.get(0.0, 'end')
    name07 = te17.get(0.0, 'end')
    name08 = te18.get(0.0, 'end')
    name09 = te19.get(0.0, 'end')
    name10 = te20.get(0.0, 'end')
    name11 = te21.get(0.0, 'end')
    name12 = te22.get(0.0, 'end')
    value01 =float( t2.get(0.0, 'end'))
    value02 = float(t4.get(0.0, 'end'))
    value03 =float( t6.get(0.0, 'end'))
    value04 = float(t8.get(0.0, 'end'))
    value05 = float(tex5.get(0.0, 'end'))
    value06 = float(tex6.get(0.0, 'end'))
    value07 = float(tex7.get(0.0, 'end'))
    value08 = float(tex8.get(0.0, 'end'))
    value09 = float(tex9.get(0.0, 'end'))
    value10 = float(tex10.get(0.0, 'end'))
    value11 = float(tex11.get(0.0, 'end'))
    value12 = float(tex12.get(0.0, 'end'))
    valueb01 =float( t9.get(0.0, 'end'))
    valueb02 = float(t10.get(0.0, 'end'))
    valueb03 = float(t11.get(0.0, 'end'))
    valueb04 = float(t12.get(0.0, 'end'))
    valueb05 = float(tex5bj.get(0.0, 'end'))
    valueb06 = float(tex6bj.get(0.0, 'end'))
    valueb07 =float( tex7bj.get(0.0, 'end'))
    valueb08 = float(tex8bj.get(0.0, 'end'))
    valueb09 =float( tex9bj.get(0.0, 'end'))
    valueb10 = float(tex10bj.get(0.0, 'end'))
    valueb11 =float( tex11bj.get(0.0, 'end'))
    valueb12 =float( tex12bj.get(0.0, 'end'))
    boyandgirl=title_all_chart.get(0.0, 'end')
    girl = t14.get(0.0, 'end')
    boy=t13.get(0.0, 'end')
    _xtick_labels = [name01, name02, name03, name04,name05,name06,name07,name08,name09,name10,name11,name12]
    x = range(1, 13)
    y = [value01, value02, value03,value04,value05, value06, value07,value08,value09, value10, value11,value12]
    yb = [valueb01, valueb02, valueb03, valueb04, valueb05, valueb06, valueb07, valueb08, valueb09, valueb10, valueb11, valueb12]
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    fig = plt.figure(figsize = (12, 8), dpi = 60)
    ln1, = plt.plot(x, y, color='red', linewidth=2.0, linestyle='--')
    ln2, = plt.plot(x, yb, color='blue', linewidth=3.0, linestyle='-.')
    #plt.xticks(x, _xtick_labels, fontproperties = my_font)
    plt.xticks(x, _xtick_labels)
    plt.legend(handles=[ln1, ln2], labels=[boy,girl])
    plt.title(boyandgirl)
    # 绘制网格
    plt.grid(alpha = 0.5)
    plt.show()
def csv2mtb():
    showinfo('提示', '选择一个csv文件(如rogabet-note\stock里股票csv表).')
    csvstPath = askopenfilename(defaultextension='.csv')
    import csv
    filename = csvstPath
    with open(filename, 'r',encoding='utf8')as file:
        # 1.创建阅读器对象
        reader = csv.reader(file)
        # 2.读取文件头信息
        header_row = next(reader)
        print(header_row)
    from datetime import datetime
    from matplotlib import pyplot as plt
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体
    plt.rcParams['axes.unicode_minus'] = False  # 解决保存图像是负号'-'显示为方块的问题
    filename = csvstPath
    with open(filename, 'r',encoding='utf8')as file:
        # 1.创建阅读器对象
        reader = csv.reader(file)
        # 2.读取文件头信息
        header_row = next(reader)
        # 3.保存最高气温数据
        dates, hights = [], []
        for row in reader:
            dates.append(row[0])
            hights.append(eval(row[1]))
        # 5.根据数据绘制图形
        fig = plt.figure(dpi=128, figsize=(10, 6))
        # 6.将列表hights传个plot()方法
        plt.plot(dates, hights, c='red')

        # 7.设置图形的格式
        boyandgirl = title_all_chart.get(0.0, 'end')
        plt.title(boyandgirl, fontsize=24)
        plt.xlabel('', fontsize=26)
        # 8.绘制斜线日期标签
        #fig.autofmt_xdate()
        plt.ylabel('', fontsize=16)
        plt.tick_params(axis='both', which='major', labelsize=16)
        plt.show()
def csv2mtb_2():
    showinfo('提示', '选择一个csv文件(如rogabet-note\stock里股票csv表).')
    csvstPath = askopenfilename(defaultextension='.csv')
    import csv
    filename = csvstPath
    with open(filename, 'r',encoding='utf8')as file:
        # 1.创建阅读器对象
        reader = csv.reader(file)
        # 2.读取文件头信息
        header_row = next(reader)
        print(header_row)
    from datetime import datetime
    from matplotlib import pyplot as plt
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体
    plt.rcParams['axes.unicode_minus'] = False  # 解决保存图像是负号'-'显示为方块的问题
    filename = csvstPath
    with open(filename, 'r',encoding='utf8')as file:
        # 1.创建阅读器对象
        reader = csv.reader(file)
        # 2.读取文件头信息
        header_row = next(reader)
        # 3.保存最高气温数据
        dates, hights,clist = [], [],[]
        for row in reader:
            dates.append(row[0])
            hights.append(eval(row[1]))
            clist.append(eval(row[2]))
        # 5.根据数据绘制图形
        fig = plt.figure(dpi=128, figsize=(10, 6))
        # 6.将列表hights传个plot()方法

        plt.plot(dates, hights, c='red')
        plt.plot(dates, clist,  c='blue')
        # 7.设置图形的格式
        boyandgirl = title_all_chart.get(0.0, 'end')
        plt.title(boyandgirl, fontsize=24)
        plt.xlabel('', fontsize=26)
        # 8.绘制斜线日期标签
        #fig.autofmt_xdate()
        plt.ylabel('', fontsize=16)
        plt.tick_params(axis='both', which='major', labelsize=16)
        plt.show()

la0=ttk.Label(frame5shujutu,text=' 如果不需要多余名称，就填空格，多余数值填空0，Y 代表折线图12个月的走势y坐标，名称可填写1-12月) ')
la0.grid(row=0,column=0,columnspan=5)
l1=ttk.Label(frame5shujutu,text=' 名称一: ')
l1.grid(row=1,column=0)
t1=Text(frame5shujutu,width=18,height=1)
t1.grid(row=1,column=1)
l2=ttk.Label(frame5shujutu,text='数值Y: ')
l2.grid(row=1,column=2)
t2=Text(frame5shujutu,width=8,height=1)
t2.grid(row=1,column=3)
l9=ttk.Label(frame5shujutu,text='比较值: ')
l9.grid(row=1,column=4)
t9=Text(frame5shujutu,width=8,height=1)
t9.grid(row=1,column=5)
##---
l3=ttk.Label(frame5shujutu,text=' 名称二: ')
l3.grid(row=2,column=0)
t3=Text(frame5shujutu,width=18,height=1)
t3.grid(row=2,column=1)
l4=ttk.Label(frame5shujutu,text='数值Y: ')
l4.grid(row=2,column=2)
t4=Text(frame5shujutu,width=8,height=1)
t4.grid(row=2,column=3)
l10=ttk.Label(frame5shujutu,text='比较值: ')
l10.grid(row=2,column=4)
t10=Text(frame5shujutu,width=8,height=1)
t10.grid(row=2,column=5)
##--
l5=ttk.Label(frame5shujutu,text=' 名称三: ')
l5.grid(row=3,column=0)
t5=Text(frame5shujutu,width=18,height=1)
t5.grid(row=3,column=1)
l6=ttk.Label(frame5shujutu,text='数值Y: ')
l6.grid(row=3,column=2)
t6=Text(frame5shujutu,width=8,height=1)
t6.grid(row=3,column=3)
l11=ttk.Label(frame5shujutu,text='比较值: ')
l11.grid(row=3,column=4)
t11=Text(frame5shujutu,width=8,height=1)
t11.grid(row=3,column=5)
#--
l7=ttk.Label(frame5shujutu,text=' 名称四: ')
l7.grid(row=4,column=0)
t7=Text(frame5shujutu,width=18,height=1)
t7.grid(row=4,column=1)
l8=ttk.Label(frame5shujutu,text='数值Y: ')
l8.grid(row=4,column=2)
t8=Text(frame5shujutu,width=8,height=1)
t8.grid(row=4,column=3)
l12=ttk.Label(frame5shujutu,text='比较值: ')
l12.grid(row=4,column=4)
t12=Text(frame5shujutu,width=8,height=1)
t12.grid(row=4,column=5)

la16=ttk.Label(frame5shujutu,text=' 名称五: ')
la16.grid(row=5,column=0)
te15=Text(frame5shujutu,width=18,height=1)
te15.grid(row=5,column=1)
la24=ttk.Label(frame5shujutu,text='数值Y: ')
la24.grid(row=5,column=2)
tex5=Text(frame5shujutu,width=8,height=1)    #5yue shuzhi
tex5.grid(row=5,column=3)
labj5=ttk.Label(frame5shujutu,text='比较值: ')
labj5.grid(row=5,column=4)
tex5bj=Text(frame5shujutu,width=8,height=1)    #5yue shuzhi
tex5bj.grid(row=5,column=5)

la17=ttk.Label(frame5shujutu,text=' 名称六: ')
la17.grid(row=6,column=0)
te16=Text(frame5shujutu,width=18,height=1)    #
te16.grid(row=6,column=1)
la25=ttk.Label(frame5shujutu,text='数值Y: ')
la25.grid(row=6,column=2)
tex6=Text(frame5shujutu,width=8,height=1)    #6 yue shuzhi
tex6.grid(row=6,column=3)
labj6=ttk.Label(frame5shujutu,text='比较值: ')
labj6.grid(row=6,column=4)
tex6bj=Text(frame5shujutu,width=8,height=1)    #6yue shuzhi
tex6bj.grid(row=6,column=5)

la18=ttk.Label(frame5shujutu,text=' 名称七: ')
la18.grid(row=7,column=0)
te17=Text(frame5shujutu,width=18,height=1)    # 7
te17.grid(row=7,column=1)
la26=ttk.Label(frame5shujutu,text='数值Y: ')
la26.grid(row=7,column=2)
tex7=Text(frame5shujutu,width=8,height=1)    #7 yue shuzhi
tex7.grid(row=7,column=3)
labj7=ttk.Label(frame5shujutu,text='比较值: ')
labj7.grid(row=7,column=4)
tex7bj=Text(frame5shujutu,width=8,height=1)    #7yue shuzhi
tex7bj.grid(row=7,column=5)

la19=ttk.Label(frame5shujutu,text=' 名称八: ')
la19.grid(row=8,column=0)
te18=Text(frame5shujutu,width=18,height=1)    # 8
te18.grid(row=8,column=1)
la27=ttk.Label(frame5shujutu,text='数值Y: ')
la27.grid(row=8,column=2)
tex8=Text(frame5shujutu,width=8,height=1)    # 8 yue shuzhi
tex8.grid(row=8,column=3)
labj8=ttk.Label(frame5shujutu,text='比较值: ')
labj8.grid(row=8,column=4)
tex8bj=Text(frame5shujutu,width=8,height=1)    #8yue shuzhi
tex8bj.grid(row=8,column=5)

la20=ttk.Label(frame5shujutu,text=' 名称九: ')
la20.grid(row=9,column=0)
te19=Text(frame5shujutu,width=18,height=1)    # 9
te19.grid(row=9,column=1)
la28=ttk.Label(frame5shujutu,text='数值Y: ')
la28.grid(row=9,column=2)
tex9=Text(frame5shujutu,width=8,height=1)    # 9 yue shuzhi
tex9.grid(row=9,column=3)
labj9=ttk.Label(frame5shujutu,text='比较值: ')
labj9.grid(row=9,column=4)
tex9bj=Text(frame5shujutu,width=8,height=1)    #9yue shuzhi
tex9bj.grid(row=9,column=5)

la21=ttk.Label(frame5shujutu,text=' 名称十: ')
la21.grid(row=10,column=0)
te20=Text(frame5shujutu,width=18,height=1)    # 10
te20.grid(row=10,column=1)
la29=ttk.Label(frame5shujutu,text='数值Y: ')
la29.grid(row=10,column=2)
tex10=Text(frame5shujutu,width=8,height=1)    # 10 yue shuzhi
tex10.grid(row=10,column=3)
labj10=ttk.Label(frame5shujutu,text='比较值: ')
labj10.grid(row=10,column=4)
tex10bj=Text(frame5shujutu,width=8,height=1)    #10yue shuzhi
tex10bj.grid(row=10,column=5)

la22=ttk.Label(frame5shujutu,text=' 名称11: ')
la22.grid(row=11,column=0)
te21=Text(frame5shujutu,width=18,height=1)    # 11
te21.grid(row=11,column=1)
la30=ttk.Label(frame5shujutu,text='数值Y: ')
la30.grid(row=11,column=2)
tex11=Text(frame5shujutu,width=8,height=1)    # 11 yue shuzhi
tex11.grid(row=11,column=3)
labj11=ttk.Label(frame5shujutu,text='比较值: ')
labj11.grid(row=11,column=4)
tex11bj=Text(frame5shujutu,width=8,height=1)    #11yue shuzhi
tex11bj.grid(row=11,column=5)

la23=ttk.Label(frame5shujutu,text=' 名称12: ')
la23.grid(row=12,column=0)
te22=Text(frame5shujutu,width=18,height=1)    # 12
te22.grid(row=12,column=1)
la31=ttk.Label(frame5shujutu,text='数值Y: ')
la31.grid(row=12,column=2)
tex12=Text(frame5shujutu,width=8,height=1)    # 12 yue shuzhi
tex12.grid(row=12,column=3)
labj12=ttk.Label(frame5shujutu,text='比较值: ')
labj12.grid(row=12,column=4)
tex12bj=Text(frame5shujutu,width=8,height=1)    #12yue shuzhi
tex12bj.grid(row=12,column=5)
#------------------------------------
l13=ttk.Label(frame5shujutu,text='并列柱左名称: ')
l13.grid(row=13,column=0)
l14=ttk.Label(frame5shujutu,text='比较值名称: ')
l14.grid(row=13,column=3)
t13=Text(frame5shujutu,width=18,height=1)
t13.grid(row=13,column=1,columnspan=2)
t14=Text(frame5shujutu,width=18,height=1)
t14.grid(row=13,column=4)
l15=ttk.Label(frame5shujutu,text='比较值用于并列柱和雷达 ')
l15.grid(row=14,column=4)
b1=ttk.Button(frame5shujutu,text="产生饼图",width=14,command=draw_pie)
b1.grid(row=14,column=0)
b2=ttk.Button(frame5shujutu,text="产生柱状图",width=14,command=draw_zhu_chart)
b2.grid(row=14,column=1)
b2=ttk.Button(frame5shujutu,text="并列柱状图",width=14,command=bin_zhu_chart)
b2.grid(row=14,column=2)
b2sb=ttk.Button(frame5shujutu,text="内嵌双饼图",width=14,command=shuang_bintu)
b2sb.grid(row=17,column=0)
b2csvmt=ttk.Button(frame5shujutu,text="表csv->折线图",width=14,command=csv2mtb)
b2csvmt.grid(row=17,column=1)
b2csvmt2=ttk.Button(frame5shujutu,text="表csv->折线对比",width=16,command=csv2mtb_2)
b2csvmt2.grid(row=17,column=2)
lastread1=ttk.Label(frame5shujutu,text='表csv->折线对比 选择的csv表需要 第一第二第三列有数值 ')
lastread1.grid(row=18,column=0,columnspan=3)
lastread2=ttk.Label(frame5shujutu,text='表csv->折线图 选择的csv表需要 首列次列有数值(首列 x轴) ')
lastread2.grid(row=19,column=0,columnspan=3)
l16=ttk.Label(frame5shujutu,text='所有主标题： ')
l16.grid(row=15,column=3)
title_all_chart=Text(frame5shujutu,width=18,height=1)
title_all_chart.grid(row=15,column=4)
def qct():
    t1.delete(0.0,'end')
    t2.delete(0.0, 'end')
    t3.delete(0.0, 'end')
    t4.delete(0.0, 'end')
    t5.delete(0.0, 'end')
    t6.delete(0.0, 'end')
    t7.delete(0.0, 'end')
    t8.delete(0.0, 'end')

    t9.delete(0.0, 'end')
    t10.delete(0.0, 'end')
    t11.delete(0.0, 'end')
    t12.delete(0.0, 'end')
    t9.insert('end', '0')
    t10.insert('end', '0')
    t11.insert('end', '0')
    t12.insert('end', '0')

    t13.delete(0.0, 'end')
    t14.delete(0.0, 'end')

    te15.delete(0.0, 'end')
    te16.delete(0.0, 'end')
    te17.delete(0.0, 'end')
    te18.delete(0.0, 'end')
    te19.delete(0.0, 'end')
    te20.delete(0.0, 'end')
    te21.delete(0.0, 'end')
    te22.delete(0.0, 'end')
    te15.insert('end', ' ')
    te16.insert('end', ' ')
    te17.insert('end', ' ')
    te18.insert('end', ' ')
    te19.insert('end', ' ')
    te20.insert('end', ' ')
    te21.insert('end', ' ')
    te22.insert('end', ' ')

    tex5.delete(0.0, 'end')
    tex6.delete(0.0, 'end')
    tex7.delete(0.0, 'end')
    tex8.delete(0.0, 'end')
    tex9.delete(0.0, 'end')
    tex10.delete(0.0, 'end')
    tex11.delete(0.0, 'end')
    tex12.delete(0.0, 'end')
    tex5.insert('end', '0')
    tex6.insert('end', '0')
    tex7.insert('end', '0')
    tex8.insert('end', '0')
    tex9.insert('end', '0')
    tex10.insert('end', '0')
    tex11.insert('end', '0')
    tex12.insert('end', '0')

    tex5bj.delete(0.0, 'end')
    tex6bj.delete(0.0, 'end')
    tex7bj.delete(0.0, 'end')
    tex8bj.delete(0.0, 'end')
    tex9bj.delete(0.0, 'end')
    tex10bj.delete(0.0, 'end')
    tex11bj.delete(0.0, 'end')
    tex12bj.delete(0.0, 'end')
    tex5bj.insert('end', '0')
    tex6bj.insert('end', '0')
    tex7bj.insert('end', '0')
    tex8bj.insert('end', '0')
    tex9bj.insert('end', '0')
    tex10bj.insert('end', '0')
    tex11bj.insert('end', '0')
    tex12bj.insert('end', '0')

def xlsxtubiao():
    import pandas as pd
    import matplotlib.pyplot as plt
    chutuxlsxPath = askopenfilename(defaultextension='.xlsx')
    df = pd.read_excel(chutuxlsxPath)
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    x1 = df[t1biaox1.get(1.0, 'end').replace('\n','')]
    y1 = df[t2biaoy1.get(1.0,  'end').replace('\n','')]
    y2 = df[t3biaoy2.get(1.0,  'end').replace('\n','')]
    plt.plot(x1, y1, color='red', linewidth=3, linestyle='solid')
    plt.plot(x1, y2, color='black', linewidth=3, linestyle='solid')
    plt.title('红色:'+t2biaoy1.get(1.0,  'end').replace('\n','')+'；黑色:'+t3biaoy2.get(1.0,  'end').replace('\n',''))
    plt.show()
def xlsxtubiao2():
    import pandas as pd
    import matplotlib.pyplot as plt
    chutuxlsxPath = askopenfilename(defaultextension='.xlsx')
    df = pd.read_excel(chutuxlsxPath)
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    x1 = df[t1biaox1.get(1.0, 'end').replace('\n','')]
    y1 = df[t2biaoy1.get(1.0,  'end').replace('\n','')]
    y2 = df[t3biaoy2.get(1.0,  'end').replace('\n','')]
    plt.plot(x1, y1, color='red', linewidth=3, linestyle='solid')
    plt.bar(x1, y2, color='blue')
    plt.title('红色:' + t2biaoy1.get(1.0, 'end').replace('\n', '') + '；蓝色:' + t3biaoy2.get(1.0, 'end').replace('\n', ''))
    plt.show()
def xlsxtubiao3():
    import xlwings as xw
    app = xw.App(visible=True, add_book=False)
    chutuxlsxPath = askopenfilename(defaultextension='.xlsx')
    workbook = app.books.open(chutuxlsxPath)
    for i in workbook.sheets:
        chart = i.charts.add(left=250, top=0, width=355, height=211)
        chart.set_source_data(i['A1'].expand())
        chart.chart_type = 'column_clustered'
    workbook.save('柱形图.xlsx')
    workbook.close()
    app.quit()
    os.startfile('柱形图.xlsx')
def xlsxtubiao4():
    import xlwings as xw
    app = xw.App(visible=True, add_book=False)
    chutuxlsxPath = askopenfilename(defaultextension='.xlsx')
    workbook = app.books.open(chutuxlsxPath)
    for i in workbook.sheets:
        chart = i.charts.add(left=250, top=0, width=355, height=211)
        chart.set_source_data(i['A1'].expand('table'))
        chart.chart_type = 'bar_clustered'
    workbook.save('条形图.xlsx')
    workbook.close()
    app.quit()
    os.startfile('条形图.xlsx')
def xlsxtubiao5():
    import xlwings as xw
    app = xw.App(visible=True, add_book=False)
    chutuxlsxPath = askopenfilename(defaultextension='.xlsx')
    workbook = app.books.open(chutuxlsxPath)
    for i in workbook.sheets:
        chart = i.charts.add(left=250, top=0, width=355, height=211)
        chart.set_source_data(i['A1'].expand('table'))
        chart.chart_type = 'pie'
        #https://blog.csdn.net/weixin_39540426/article/details/110316885
    workbook.save('饼图.xlsx')
    workbook.close()
    app.quit()
    os.startfile('饼图.xlsx')
def xlsx2xlsxmany():
    import xlwings as xw
    showinfo('提示', '选择一个excel文件 如 产品销售表.xlsx.(含有多个工作表sheet)，分裂出的多个文件在程序同目录，稍后为你打开该目录.')
    fenliexlsxPath = askopenfilename(title='打开xlsx文件',defaultextension='.xlsx')
    workbook_name =fenliexlsxPath
    app = xw.App(visible=False, add_book=False)
    header = None
    all_data = []
    workbook = app.books.open(workbook_name)
    for i in workbook.sheets:
        workbook_split = app.books.add()
        sheet_split = workbook_split.sheets[0]
        i.api.Copy(Before=sheet_split.api)
        workbook_split.save('{}'.format(i.name))
    app.quit()
    start_directoryp2 = os.getcwd()
    os.system("explorer.exe %s" % start_directoryp2)

xlsxtubiaoframe=ttk.LabelFrame(frame5shujutu,text='根据数据表填写->选xlsx表->出对比图',width=80,height=400)
xlsxtubiaoframe.grid(row=1,column=6,rowspan=15)

l1biaox1=ttk.Label(xlsxtubiaoframe,text='    填写表格第1列名称（x 如 月份）')
l1biaox1.grid(row=1,column=0)
t1biaox1=Text(xlsxtubiaoframe,width=18,height=1)
t1biaox1.grid(row=2,column=0)

l2biaoy1=ttk.Label(xlsxtubiaoframe,text='    填写表格第2列名称（y1 如 销售额）')
l2biaoy1.grid(row=3,column=0)
t2biaoy1=Text(xlsxtubiaoframe,width=18,height=1)
t2biaoy1.grid(row=4,column=0)

l3biaoy2=ttk.Label(xlsxtubiaoframe,text='    填写表格第n列名称（y2 如 利润）')
l3biaoy2.grid(row=5,column=0)
t3biaoy2=Text(xlsxtubiaoframe,width=18,height=1)
t3biaoy2.grid(row=6,column=0)
# b0biaox1=ttk.Button(xlsxtubiaoframe,text="选择表文件",width=14)
# b0biaox1.grid(row=7,column=0)
b1biaox1=ttk.Button(xlsxtubiaoframe,text=" 双折线图  ",width=20,command=xlsxtubiao)
b1biaox1.grid(row=8,column=0)
b2biaox1=ttk.Button(xlsxtubiaoframe,text=" 出组合图  ",width=20,command=xlsxtubiao2)
b2biaox1.grid(row=9,column=0)
l4biaoy4=ttk.Label(xlsxtubiaoframe,text='样本表在程序同目录(销售业绩表)')
l4biaoy4.grid(row=10,column=0)
b3biao=ttk.Button(xlsxtubiaoframe,text=" 免填-选表->柱形图  ",width=20,command=xlsxtubiao3)
b3biao.grid(row=11,column=0)
b4biao=ttk.Button(xlsxtubiaoframe,text=" 免填-选表->条形图  ",width=20,command=xlsxtubiao4)
b4biao.grid(row=12,column=0)
b5biao=ttk.Button(xlsxtubiaoframe,text=" 免填-选表->饼图  ",width=20,command=xlsxtubiao5)
b5biao.grid(row=13,column=0)

l5biaoy4=ttk.Label(xlsxtubiaoframe,text='以下样本在程序同目录(产品销售表)')
l5biaoy4.grid(row=14,column=0)
b5biao=ttk.Button(xlsxtubiaoframe,text=" 单文件内多表拆为多文件",width=21,command=xlsx2xlsxmany)
b5biao.grid(row=15,column=0)

b3=ttk.Button(frame5shujutu,text="初始化清空",width=14,command=qct)
b3.grid(row=15,column=2)
b4=ttk.Button(frame5shujutu,text="折线图",width=14,command=zhexiantu)
b4.grid(row=15,column=0)
b5=ttk.Button(frame5shujutu,text="雷达图(6组数)",width=14,command=leida)
b5.grid(row=15,column=1)
qct()
#-------------饼图 柱状图 并列柱状 折线图 结束------------------------------------------------
zhuti = Menu(menubar)
zhuti.add_command(label='myscidpink-粉妆玉砌',  command=zhuti06,underline=0)
#zhuti.add_command(label='clearlooks-金秋时节',  command=zhuti04,underline=0)
zhuti.add_command(label='plastik-黄道吉日',  command=zhuti02,underline=0)
zhuti.add_command(label='scidmint-薄荷清新',  command=zhuti09,underline=0)
#zhuti.add_command(label='yunsmog-腾云驾雾',  command=zhuti07,underline=0)
#zhuti.add_command(label='breeze-蓝色极光',  command=zhuti10,underline=0)
#zhuti.add_command(label='keramik-紫气东来',  command=zhuti05,underline=0)
zhuti.add_separator()
zhuti.add_command(label='aquativo-坑灰未冷',  command=zhuti01,underline=0)
zhuti.add_command(label='xpwin7-岁月流金',  command=zhuti08,underline=0)

#zhuti.add_command(label='equilux-黑客帝国',  command=zhuti11,underline=0)
#zhuti.add_command(label='lanitft1-冰雪奇缘',  command=zhuti03,underline=0)
zhuti.add_separator()
zhuti.add_command(label='setbgc-背景色修改', command=bgcolormy,underline=0)
menubar.add_cascade(label='Z 主题颜色', menu=zhuti,underline=0)

#ttk theme menu----------------------------------------------------------------------------------------------
toolbar0 = ttk.Frame(root, relief=RAISED, borderwidth=1)
toolbar0.pack(side=TOP, fill=X, padx=2, pady=1)
mb1file = ttk.Menubutton(toolbar0, text="F 文件", underline=0)
mb1file.pack(side=LEFT)
filemenu = Menu(mb1file)
filemenu.add_command(label='0 新建',  command=new,underline=0)
filemenu.add_command(label='1 打开txt',  command=myopen,underline=0)
filemenu.add_command(label='2 保存txt', command=save,underline=0)
filemenu.add_command(label='3 打开note',  command=myopen2,underline=0)
filemenu.add_command(label='4 保存note', command=save2,underline=0)
filemenu.add_command(label='5 另存为...',  command=saveas,underline=0)
filemenu.add_command(label ='6 编码记事本', command=bimanote,underline=0)
filemenu.add_command(label = '7 生成二维码', command=qrout,underline=0)
filemenu.add_command(label = '8 导出xlsx表格', command=txt2xlsxrd,underline=0)
filemenu.add_command(label = '9 暂存到云FTP', command=yun_note,underline=0)
filemenu.add_command(label='Y 打印机设置',  command=printerset,underline=0)
filemenu.add_command(label='L 开始打印',  command=printer,underline=0)
filemenu.add_command(label='T 退出',  command=willquit,underline=0)
mb1file.config(menu = filemenu)

mb2edit = ttk.Menubutton(toolbar0, text="E 编辑",  underline=0)
mb2edit.pack(side=LEFT)
editmenu = Menu(mb2edit)
editmenu.add_command(label='撤销', accelerator='Ctrl+Z', command=undo)
editmenu.add_command(label='重做', accelerator='Ctrl+Y', command=redo)
editmenu.add_command(label='剪切', accelerator='Ctrl+X', command=cut)
editmenu.add_command(label='复制', accelerator='Ctrl+C', command=copy)
editmenu.add_command(label='粘贴', accelerator='Ctrl+V', command=paste)
editmenu.add_command(label='全选', accelerator='Ctrl+A', command=select_all)
editmenu.add_separator()
editmenu.add_command(label='0 查找替换+ 批量表求和+抽表指定行', command=find,underline=0)
editmenu.add_command(label='1 插入日期时间', command=addtime,underline=0)
editmenu.add_command(label='2 插入PC硬件信息', command=addpcinfo,underline=0)
editmenu.add_command(label='3 插入CSV里的文字', command=addcsv,underline=0)
editmenu.add_command(label='4 插入非扫描PDF的文字', command=addpdf,underline=0)
editmenu.add_command(label='5 插入XLSX(excel表)里文字', command=addxlsx,underline=0)
editmenu.add_command(label ='6 插入PPTX演示文稿里文字', command=newpptx,underline=0)
editmenu.add_command(label='7 插入docx(word档)里的文字', command=adddocx,underline=0)
editmenu.add_command(label = '8 开启每10分鈡保存当前TXT', command=savePerFive,underline=0)
editmenu.add_command(label = '9 关闭每10分鈡保存当前TXT', command=savePer10ff,underline=0)
editmenu.add_command(label = '首列减去次列字段(空格分开为列)', command=aaa_bbb,underline=0)
editmenu.add_command(label = 'decode-unicode-escape解码', command=uuu2chn,underline=0)
mb2edit.config(menu = editmenu)

mb3trans = ttk.Menubutton(toolbar0, text="D 翻译朗读",  underline=0)
mb3trans.pack(side=LEFT)
toolmenu = Menu(mb3trans)
toolmenu.add_command(label = '0 朗读全文', command=spk,underline=0)
toolmenu.add_command(label = '1 朗读选句', command=spksel,underline=0)
toolmenu.add_command(label = '2 中译英 ', command=toEn,underline=0)
toolmenu.add_command(label = '3 英译中 ', command=toCn,underline=0)
toolmenu.add_command(label = '4 简->繁 ', command=toCht,underline=0)
toolmenu.add_command(label = '5 繁->简 ', command=fromCht,underline=0)
toolmenu.add_command(label = '6 中译日 ', command=toJp,underline=0)
toolmenu.add_command(label = '7 日译中 ', command=fromJp,underline=0)
#toolmenu.add_command(label = '8 词霸翻译', command=ciba,underline=0)
#toolmenu.add_command(label = '9 有道翻译', command=youdao,underline=0)
mb3trans.config(menu = toolmenu)

mb4study = ttk.Menubutton(toolbar0, text="L 办公学习",  underline=0)
mb4study.pack(side=LEFT)
playmenu = Menu(mb4study)
playmenu.add_command(label ='0 悬浮工具条-截图', command=flymenu,underline=0)
playmenu.add_command(label='1 PDF的文件转图片',  command=pdftoimgha,underline=0)
playmenu.add_command(label='2 提取图中文字插入',  command=pngzwzyn,underline=0)
#playmenu.add_command(label='3 在线提取图中文字',  command=tpzwz,underline=0)
playmenu.add_command(label='3 高级长图截取',  command=longpic2,underline=0)
#playmenu.add_command(label='4 在线二维码的产生',  command=qrcodes,underline=0)
playmenu.add_command(label='4 MP3播放器',  command=play,underline=0)
playmenu.add_command(label='5 在线文档格式转换',  command=wdzh,underline=0)
playmenu.add_command(label='6 批量提取图中文字',  command=manypic2txt,underline=0)
#playmenu.add_command(label='6 在线语音转文字',  command=yyzwz2,underline=0)
playmenu.add_command(label='7 有道云笔记', command=ynote,underline=0)
playmenu.add_command(label='8 网页版微信',  command=play2,underline=0)
playmenu.add_command(label = 'J 框选截图', command=jietula,underline=0)
playmenu.add_command(label='B 在线计算',  command=wkweb,underline=0)
mb4study.config(menu = playmenu)

mb5code = ttk.Menubutton(toolbar0, text="M 加密和邮件",  underline=0)
mb5code.pack(side=LEFT)
codemenu = Menu(mb5code)
codemenu.add_command(label = '0 加密当前文档 ', command=Unicode2HexStr,underline=0)
codemenu.add_command(label = '1 修改解密账户', command=haha,underline=0)
codemenu.add_command(label = '2 账号解密文档', command=HexStr2Unicode,underline=0)
#codemenu.add_command(label = '3 人脸解密文档', command=renlianjiemi,underline=0)
codemenu.add_command(label='3 整理邮件收件',  command=open_mail_inbox,underline=0)
codemenu.add_command(label='4 收取最新邮件',  command=getmail,underline=0)

codemenu.add_command(label='5 AES加密文件',  command=aesone,underline=0)
codemenu.add_command(label='6 AES解密文件',  command=unaesone,underline=0)
codemenu.add_command(label = '7 保存密档行程计划', command=jiamidabao,underline=0)
codemenu.add_command(label = '8 导入查看行程计划', command=jiemijiebao,underline=0)
codemenu.add_command(label='9 邮件发密档行程计划',  command=sdmail,underline=0)
mb5code.config(menu = codemenu)

mb6about = ttk.Menubutton(toolbar0, text="Q 关于-其他",  underline=0)
mb6about.pack(side=LEFT)
about = Menu(mb6about)
systoolmenu=Menu(mb6about,tearoff=False)
systoolmenu.add_command(label='P 媒体播放',  command=play3,underline=0)
systoolmenu.add_command(label = 'S 计算器', command=jisuanqi,underline=0)
systoolmenu.add_command(label = 'Y 画图', command=paint,underline=0)
systoolmenu.add_command(label = 'J 系统截图', command=xtjt,underline=0)
about.add_command(label='0 PDF-PPT-表等批量工具',  command=pdfbox,underline=0)
about.add_command(label ='1 旧的xls表格处理', command=oldxlsopen,underline=0)
about.add_command(label ='2 播放旧的PPT演示', command=oldppt,underline=0)
about.add_command(label ='3 播放新PPTX演示', command=newpptxplay,underline=0)
about.add_command(label ='4 打开PDF文件', command=rddpdf,underline=0)
about.add_cascade(label='5 系统工具',  menu=systoolmenu,underline=0)
about.add_command(label = '6 使用说明', command=fanyisuoming,underline=0)
about.add_command(label = '7 天数计算', command=tianshu,underline=0)
about.add_command(label = '8 自动任务', command=tinytask,underline=0)
about.add_command(label='9 ~思维导图',  command=fly,underline=0)
mb6about.config(menu = about)

mb7zhuti = ttk.Menubutton(toolbar0, text="Z 主题颜色",  underline=0)
mb7zhuti.pack(side=LEFT)
zhuti = Menu(mb7zhuti)
zhuti.add_command(label='scidpink-粉妆玉砌',  command=zhuti06,underline=0)
zhuti.add_command(label='clearlooks-金秋时节',  command=zhuti04,underline=0)
zhuti.add_command(label='plastik-黄道吉日',  command=zhuti02,underline=0)
zhuti.add_command(label='scidmint-薄荷清新',  command=zhuti09,underline=0)
zhuti.add_command(label='smog-腾云驾雾',  command=zhuti07,underline=0)
zhuti.add_command(label='breeze-蓝色极光',  command=zhuti10,underline=0)
zhuti.add_command(label='keramik-紫气东来',  command=zhuti05,underline=0)
zhuti.add_separator()
zhuti.add_command(label='xpwin7-岁月流金',  command=zhuti08,underline=0)
zhuti.add_command(label='aquativo-坑灰未冷',  command=zhuti01,underline=0)
zhuti.add_command(label='equilux-黑客帝国',  command=zhuti11,underline=0)
zhuti.add_command(label='blueitft1-冰雪奇缘',  command=zhuti03,underline=0)
zhuti.add_separator()
zhuti.add_command(label='changebgc-背景色修改', command=bgcolormy)
mb7zhuti.config(menu = zhuti)
# def show_menu():
# 	menubar = Menu(root)
# 	root.config(menu=menubar)

def remove_tkmenu():
    emptyMenu = Menu(root)
    root.config(menu=emptyMenu)
menubutton_show = ttk.Menubutton(toolbar, text = " 显隐 ")
menubutton_show.menu = Menu(menubutton_show)
menubutton_show["menu"]=menubutton_show.menu
menubutton_show.menu.add_command(label = "显示下载工具条",  command=toolbar4.pack,underline=0)
menubutton_show.menu.add_command(label = "显示发送邮件条",  command=toolbar2.pack,underline=0)
menubutton_show.menu.add_command(label = "显示查找邮件条",  command=toolbar3.pack,underline=0)
menubutton_show.menu.add_command(label = "显示带主题菜单",  command=toolbar0.pack,underline=0)
menubutton_show.menu.add_command(label = "隐藏下载工具条",  command=toolbar4.pack_forget,underline=0)
menubutton_show.menu.add_command(label = "隐藏发送邮件条",  command=toolbar2.pack_forget,underline=0)
menubutton_show.menu.add_command(label = "隐藏查找邮件条",  command=toolbar3.pack_forget,underline=0)
#https://my.oschina.net/u/2340880/blog/1559980
menubutton_show.menu.add_command(label = "隐藏带主题菜单",  command=toolbar0.pack_forget,underline=0)

menubutton_show.menu.add_command(label = "隐藏主菜单",  command=remove_tkmenu,underline=0)
menubutton_show.pack(side=LEFT)


textPad4use_manual.delete(1.0, END)
with open('detail-use.txt', 'r')as usemanual:
    contentmanual = usemanual.read()
    textPad4use_manual.insert(1.0, contentmanual)
#https://docs.python.org/3.4/library/tkinter.ttk.html#tkinter.ttk.Style
textPad.bind('<Control-N>',new)
textPad.bind('<Control-n>',new)
textPad.bind('<Control-O>',myopen)
textPad.bind('<Control-o>',myopen)
textPad.bind('<Control-S>',save)
textPad.bind('<Control-s>',save)
textPad.bind('<Control-A>',select_all)
textPad.bind('<Control-a>',select_all)
textPad.bind('<Control-F>',find)
textPad.bind('<Control-f>',find)
textPad.bind('<Button-3>',popup)


root.mainloop()

